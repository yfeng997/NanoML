{
    "next-boost.js": "This code is configuring caching rules for a Next.js application using Redis as the cache storage.",
    "next-env.d.ts": "This file provides reference types for Next.js and Next.js image types in TypeScript, and should not be edited.",
    ".eslintrc.js": "This module exports an ESLint configuration for TypeScript projects with specific rules and plugins.",
    "public": {
        "images": {
            "splash": {}
        }
    },
    "scripts": {},
    ".github": {
        "workflows": {},
        "ISSUE_TEMPLATE": {}
    },
    "src": {
        "middleware.ts": "This code defines a middleware function that runs a set of middlewares on a Next.js request. The middleware function is configured to match specific paths and has a request body size limit of 10mb.",
        "routed-context": {
            "routed-context.provider.tsx": "This code defines a context provider and hook for managing modals in a Next.js application. It allows opening and closing different modal components dynamically.",
            "create-routed-context.tsx": "This code defines a function called `createRoutedContext` that creates a context component with routing functionality.",
            "modals": {
                "CommentThread.tsx": "This code exports a React component that displays a modal with a comment and its related components.",
                "ModelDiscussionModal.tsx": "This code exports a React component that creates a modal for displaying a comment and its related components.",
                "ImageDetailModal.tsx": "This code creates a routed context that displays an image detail in a modal with specific filters.",
                "ModelVersionEdit.tsx": "This code is a React component that renders a modal with a form for editing a model version.",
                "ReviewThread.tsx": "This code is a React component that renders a modal with a review and its associated comments and reactions.",
                "ReviewLightbox.tsx": "This code imports and uses various components to create a Lightbox element for displaying images in a review.",
                "CommentEdit.tsx": "This code exports a React component that creates a modal for adding or editing comments with form validation and saving functionality.",
                "ResourceReviewModal.tsx": "This code imports and uses components from various libraries to create a modal with a resource review detail.",
                "ModelEdit.tsx": "This code exports a React component that creates a modal for editing a model with various components and functionality.",
                "ReviewEdit.tsx": "This code is a React component that renders a modal for adding or editing a review. It includes form inputs for selecting a model version, rating the model, providing comments or feedback, and uploading generated images. It also handles form submission and includes error handling.",
                "HiddenCommentsModal.tsx": "This code exports a React component that displays a modal with hidden comments and a discussion component.",
                "ModelVersionLightbox.tsx": "This code imports various modules and components, creates a routed context, and renders a Lightbox component.",
                "FilesEdit.tsx": "This code exports a React component that renders a modal with a container, loader, title, anchor, and files component.",
                "PostDetailModal.tsx": "This code exports a routed context that displays a modal with a post detail component inside it.",
                "Lightbox.tsx": "Lightbox component that displays a carousel of images with meta information and controls."
            }
        },
        "types": {
            "router.ts": "This code defines various types for different routers and their corresponding functionalities and components.",
            "next-auth.d.ts": "This code defines an extended user interface and extends the default user and session interfaces in NextAuth.",
            "global.d.ts": "This code defines various types and interfaces related to file handling, navigation, and user preferences."
        },
        "providers": {
            "TosProvider.tsx": "This code is a Next.js component that provides a Terms of Service (Tos) modal for onboarding new users.",
            "CustomModalsProvider.tsx": "This code defines a custom modals provider with various dynamic modals and allows opening specific modals with custom props.",
            "StripeProvider.tsx": "This code sets up a StripeProvider component that loads the Stripe library and provides it to its children.",
            "FiltersProvider.tsx": "This code defines a filter system using Zustand for managing filter state and provides hooks for accessing and updating the filters.",
            "RoutedContextProvider.tsx": "This code imports and dynamically renders various modals in a Next.js application. It also provides functions to open and close these modals.",
            "FeatureFlagsProvider.tsx": "This code provides a context and hook for managing feature flags in a React application.",
            "CookiesProvider.tsx": "This code defines schemas and functions related to cookies and their parsing for different filter options."
        },
        "static-content": {
            "careers": {},
            "guides": {},
            "rules": {},
            "interviews": {}
        },
        "server": {
            "trpc.ts": "This code defines middleware functions for authentication, authorization, and feature flag protection in a TRPC server.",
            "createContext.ts": "This code defines functions and types related to creating and managing the context for Next.js API routes.",
            "middleware.trpc.ts": "This code includes several middleware functions for handling user preferences, caching, and purging cache.",
            "routers": {
                "leaderboard.router.ts": "This code defines a leaderboard router with functions to get leaderboards, leaderboard positions, and individual leaderboards.",
                "user.router.ts": "This code defines a user router with various handlers for user-related functionality such as getting user information, updating user data, and toggling user settings.",
                "commentv2.router.ts": "This code defines a router for commentv2 operations, including getting, upserting, deleting, and locking comments.",
                "apiKey.router.ts": "This code defines a router with four routes: verifyKey, getAllUserKeys, add, and delete, each with their respective handlers and input schemas.",
                "answer.router.ts": "This code defines a router for handling CRUD operations on answers, including authentication and authorization checks.",
                "question.router.ts": "This code defines a router for handling question-related operations, including getting, creating, updating, and deleting questions. It also includes middleware for authorization checks.",
                "announcement.router.ts": "This code exports an announcement router that handles a \"getLatest\" request using a schema and a controller.",
                "model-file.router.ts": "This code snippet defines a router for handling CRUD operations on model files, with authentication and validation.",
                "article.router.ts": "This code defines a router for handling article-related requests, including getting articles, creating/updating articles, and deleting articles.",
                "user-link.router.ts": "This code defines a router for handling user link operations such as getting, creating, updating, and deleting user links.",
                "track.router.ts": "This code defines a track router with a single endpoint \"addView\" that takes input and calls a view function.",
                "post.router.ts": "This code defines a router for handling various operations related to posts, including creating, updating, deleting, and retrieving posts. It also includes middleware for handling user authorization and ownership checks.",
                "model-version.router.ts": "This code defines a router for handling various model version operations, including getting, updating, deleting, and publishing model versions. It also includes middleware for authorization checks.",
                "resourceReview.router.ts": "This code defines a router for handling resource review-related requests, including creating, updating, and deleting reviews. It also includes middleware for authorization and various service functions for retrieving review data.",
                "image.router.ts": "This code defines an image router with various handler functions for retrieving, updating, and deleting images.",
                "base.router.ts": "This code provides a utility for routers that checks if the user is a moderator and throws an authorization error if not.",
                "partner.router.ts": "This code defines a router with a single route \"getAll\" that calls the \"getAllPartners\" function from the partner service.",
                "stripe.router.ts": "This code defines a router for handling various Stripe-related procedures, including creating customers, subscriptions, and donation sessions.",
                "content.router.ts": "The code imports necessary modules and defines a function to handle content retrieval based on a given slug.",
                "comment.router.ts": "This code defines a comment router with various handlers and middleware for CRUD operations on comments.",
                "download.router.ts": "A download router with protected procedures for getting user downloads and hiding downloads using schemas and controllers.",
                "moderation.router.ts": "A moderation router with handlers for getting and updating preferences, protected with authentication and validation.",
                "model.router.ts": "This code imports various components and functions related to model handling and routing, including controllers, schemas, services, middleware, and utilities. It also defines a model router with several endpoints for handling model operations.",
                "tag.router.ts": "This code defines a tag router with various handlers for retrieving, managing, and manipulating tags.",
                "index.ts": "This code exports a router with multiple sub-routers for different components of an application's API.",
                "report.router.ts": "This code defines a report router with CRUD operations and validation using schemas and controllers.",
                "reaction.router.ts": "A router that handles a toggle reaction functionality with protected input and mutation procedures.",
                "auth.router.ts": "This code exports a router with two procedures: getUser (public) and getSecretMessage (protected).",
                "account.router.ts": "This code sets up an account router with handlers for getting user accounts and deleting an account.",
                "generation.router.ts": "This code defines a router for handling generation requests, including creating, deleting, and retrieving generation data.",
                "review.router.ts": "This code defines a router for handling review-related requests, including CRUD operations and authorization checks.",
                "notification.router.ts": "This code defines a notification router with three key functionalities: getting user notifications, marking notifications as read, and updating user notification settings."
            },
            "metrics": {
                "tag.metrics.ts": "This code imports a function \"createMetricProcessor\" and uses it to create a tagMetrics object with update and clearDay functions.",
                "post.metrics.ts": "This code imports a function called `createMetricProcessor` and exports a constant called `postMetrics`. The `createMetricProcessor` function is used to create a metric processor for the \"Post\" metric. The metric processor has two main functions: `update` and `clearDay`. The `update` function updates the metrics for posts based on recent engagements, and the `clearDay` function resets the daily metrics for posts. The metric processor also includes a `rank` object that specifies the table, primary key, and indexes for ranking the posts based on different metrics.",
                "question.metrics.ts": "This code defines a metric processor for question-related metrics, updating and clearing metrics data in a database.",
                "user.metrics.ts": "This code creates a metric processor for user metrics, updating and clearing user metrics based on various conditions.",
                "image.metrics.ts": "This code defines a metric processor for image metrics, which updates and clears image metrics in a database.",
                "article.metrics.ts": "This code updates article metrics by querying the database for views, reactions, and other engagement data.",
                "model.metrics.ts": "This code defines metric processors for model metrics, including updating download, rating, favorite, and comment metrics. It also includes functions to refresh model and model version ranks.",
                "base.metrics.ts": "This code defines a function called `createMetricProcessor` that creates a metric processor object. The metric processor has the following key functionality and components:\n\n- It has a `name` property that is a string.\n- It has an `update` property that is a function that updates the metric context.\n- It has an optional `updateInterval` property that specifies the interval in milliseconds for updating the metric context (default is 60 seconds).\n- It has an optional `clearDay` property that is a function for clearing the metric context for a new day.\n- It has an optional `rank` property that specifies the options for ranking the metric.\n- The `createMetricProcessor` function returns the metric processor object.\n\nThe metric processor object has the following methods:\n\n- `update`: An asynchronous function that updates the metric context. It checks if ClickHouse is available, clears the metric context for the first run of the day, checks if an update is needed based on the update interval, runs the update, and clears the update queue.\n- `refreshRank`: An asynchronous function that refreshes the metric rank. It checks if the rank options are available and if ClickHouse is available, checks if a rank refresh is needed based on the refresh interval, runs the rank refresh, and updates the last update date.\n- `queueUpdate`: An asynchronous function that adds an update to the update queue.\n- `recreateRankTable`: An asynchronous function that recreates the rank table with the specified options.\n\nThe code also defines types for the metric processor run context and the metric rank options.",
                "index.ts": "This code exports various metrics from different modules in the server/metrics folder.",
                "answer.metrics.ts": "This code imports a function called \"createMetricProcessor\" and uses it to create a metric processor for answer metrics. The metric processor updates the \"AnswerMetric\" table with new metrics based on recent engagements with answers. It also has a function to clear the metrics for the \"Day\" timeframe."
            },
            "middleware": {
                "redirects.middleware.ts": "This code defines a redirects middleware that matches certain paths and redirects the user accordingly.",
                "route-guards.middleware.ts": "This code defines and implements route guards middleware for Next.js applications, using session authentication and redirecting unauthorized users to the login page.",
                "api-cache.middleware.ts": "This code is a middleware function that sets cache control headers for specific API routes in a Next.js server.",
                "middleware-utils.ts": "This code defines a middleware function that can be used in Next.js applications to handle requests and sessions.",
                "index.ts": "This code defines and runs a series of middlewares in a Next.js application, handling authentication, caching, redirects, and route guards."
            },
            "clickhouse": {
                "client.ts": "The code defines a Tracker class that allows tracking various user activities and events in a ClickHouse database."
            },
            "importers": {
                "importRouter.ts": "This code defines a function `processImport` that handles importing data from different sources and updating the import status in a database. It also includes a function `processDependencies` that handles importing dependent data.",
                "huggingFaceModel.ts": "This code imports a model from HuggingFace by parsing the model URL and creating model versions with files and images.",
                "huggingFaceAuthor.ts": "This code is a module that imports HuggingFace models from a given author's URL and returns their details.",
                "importer.ts": "This code defines an Importer object with canHandle and run functions, which can handle imports and return results."
            },
            "redis": {
                "client.ts": "This code imports the Redis library and creates a Redis client with error handling and reconnecting functionality."
            },
            "auth": {
                "verificationEmail.ts": "This code sends a verification email using nodemailer, with an HTML and text body, and checks against a blocked domain list."
            },
            "playfab": {
                "client-wrapper.ts": "This code includes functions for logging in and linking accounts with PlayFab, as well as writing player events.",
                "client.ts": "This code initializes and tracks events in PlayFab using the PlayFab SDK and Redis for caching."
            },
            "cloudflare": {
                "client.ts": "This code imports the cloudflare package, creates a client, and provides a function to purge the cache."
            },
            "utils": {
                "errorHandling.ts": "This code defines various error handling functions that throw TRPCError with specific error codes and messages.",
                "rate-limiting.ts": "This code implements rate limiting functionality for API endpoints using Redis as the storage backend.",
                "get-server-auth-session.ts": "This code is an example of a Next.js API route that handles server-side authentication using NextAuth. It retrieves the session based on a token from the request headers or URL.",
                "key-generator.ts": "This code generates a random public key and a secret hash based on the key using SHA-512 algorithm.",
                "model-helpers.ts": "This code defines functions for selecting and displaying files based on preferences and metadata.",
                "endpoint-helpers.ts": "This code includes various endpoint functions for handling API requests with different levels of authentication and authorization. It also includes functions for handling maintenance mode and adding CORS headers and cache headers to the responses.",
                "session-helpers.ts": "This code provides functionality for refreshing and invalidating user sessions using JWT tokens and Redis.",
                "pagination-helpers.ts": "This code provides pagination functionality and components for retrieving and displaying paged data in an API.",
                "url-helpers.ts": "The code provides functions to get the base URL and internal URL based on the environment and NEXTAUTH_URL.",
                "server-side-helpers.ts": "This code defines functions and types for creating server-side props in Next.js with TRPC integration.",
                "early-access-helpers.ts": "This code includes functions to calculate an early access deadline and check if the current date is within the early access period.",
                "get-server-stripe.ts": "This code imports the Stripe library and creates a function to initialize and return a Stripe instance."
            },
            "integrations": {
                "discord.ts": "This code provides functionality to interact with the Discord API, including registering metadata, pushing metadata, and managing roles."
            },
            "schema": {
                "answer.schema.ts": "This code defines schemas and types for getting, upserting, and voting on answers to questions.",
                "commentv2.schema.ts": "This code defines schemas and types for comment-related functionality, including getting and upserting comments with various input options.",
                "user.schema.ts": "This code defines various validation schemas and input types for user-related operations such as querying, updating, and deleting users.",
                "leaderboard.schema.ts": "This code defines schemas for input validation in a leaderboard system using the Zod library.",
                "api-key.schema.ts": "This code defines input schemas and types for API key operations using the zod library.",
                "track.schema.ts": "This code defines a schema for adding a view with specific types and entities using the Zod library.",
                "article.schema.ts": "This code defines schemas and types for filtering and querying articles based on various criteria.",
                "announcement.schema.ts": "This code defines a type and a schema for the input of getting the latest announcement, using the 'zod' library.",
                "model-file.schema.ts": "This code defines schemas and types for model file metadata, input, creation, and update.",
                "user-link.schema.ts": "This code defines schemas and types for querying and upserting user links, with validation and type inference.",
                "file.schema.ts": "This code defines a schema for a base file object with properties like id, name, url, sizeKB, and metadata.",
                "utils.schema.ts": "This code exports a function that returns a schema for sanitizing and validating a string using zod and sanitizeHtml.",
                "question.schema.ts": "This code defines and exports several schemas for input validation, including getQuestionsSchema, upsertQuestionSchema, and setQuestionAnswerSchema.",
                "moderation.schema.ts": "This code imports and exports a schema for updating preferences using the Zod library for validation.",
                "model.schema.ts": "This code defines various schemas and types related to models, including user preferences, model inputs, and associated resources.",
                "comment.schema.ts": "This code defines schemas and types for handling comments, including filtering, sorting, and counting comments.",
                "download.schema.ts": "This code defines schemas and types using the zod library for validating and inferring data types.",
                "base.schema.ts": "This code defines schemas and types for input validation and parsing of query parameters, including pagination and infinite queries.",
                "stripe.schema.ts": "This code defines input schemas using the zod library for creating customers, subscription sessions, and donation sessions.",
                "image.schema.ts": "This code defines various schemas and types related to image generation, analysis, moderation, and retrieval.",
                "resourceReview.schema.ts": "This code defines various input schemas for user resource reviews, including validation for ratings, details, and pagination.",
                "model-version.schema.ts": "This code defines various schemas and types for recipe models, model versions, exploration prompts, and publishing versions.",
                "post.schema.ts": "This code defines various input schemas and their corresponding types for filtering, creating, updating, and retrieving posts and post tags.",
                "notification.schema.ts": "This code defines schemas and types using the zod library for handling user notifications and notification settings.",
                "generation.schema.ts": "This code includes schemas and types related to generation requests, resources, and data retrieval.",
                "review.schema.ts": "This code defines input schemas and types for handling reviews, reactions, and filters in a server application.",
                "reaction.schema.ts": "This code defines a schema for toggling reactions on different types of entities using zod.",
                "tag.schema.ts": "This code defines various schemas and types related to tagging functionality, including input validation and data structures.",
                "report.schema.ts": "This code defines schemas and types for creating, updating, and retrieving reports with different reasons and details."
            },
            "common": {
                "moderation-helpers.ts": "This code defines an object \"unpublishReasons\" with various reasons for unpublishing a resource, along with their option labels and notification messages. It also defines a type \"UnpublishReason\" which represents the keys of the \"unpublishReasons\" object.",
                "model-helpers.ts": "This code includes functions for creating download URLs, getting image generation processes, getting model wizard URLs, and checking if an image is NSFW.",
                "constants.ts": "This code defines various constants and default values for filters, file types, and other components.",
                "enums.ts": "This code defines multiple enums for sorting and filtering data, as well as different types of uploads and browsing modes."
            },
            "db": {
                "client.ts": "This file creates and exports two instances of PrismaClient for reading and writing to a database."
            },
            "jobs": {
                "deliver-purchased-cosmetics.ts": "This code creates a job that delivers purchased cosmetics and revokes limited cosmetics from users.",
                "send-webhooks.ts": "This code defines a job called \"sendWebhooksJob\" that sends webhooks to registered URLs using data retrieved from a database.",
                "reset-to-draft-without-requirements.ts": "This code creates a job that resets model versions and models to draft status under certain conditions.",
                "apply-contest-tags.ts": "This code imports functions from different modules and performs tasks related to applying contest tags to images.",
                "image-ingestion.ts": "This code defines two jobs: \"ingest-images\" and \"remove-blocked-images\" that perform image ingestion and deletion respectively.",
                "scan-files.ts": "This code is a job that scans files for viruses using a scanning service and updates their status in the database.",
                "send-notifications.ts": "This code defines a job called \"sendNotificationsJob\" that runs every minute and sends notifications. It uses various components such as a job creation function, a database client, a notification utility, a logger, and a ClickHouse client.",
                "remove-disconnected-images.ts": "This code defines a function called \"removeDisconnectedImages\" that runs a job to delete unused images.",
                "apply-voted-tags.ts": "This code imports two functions, `createJob` and `dbWrite`, and defines two constants, `TAG_THRESHOLD` and `LAST_UPDATED_KEY`. It then exports a function `applyVotedTags` that performs several database operations, including applying tags to images, enabling disabled tags, and updating NSFW baselines. Finally, it updates the last sent time in the database.",
                "temp-scan-files-missing-hashes.ts": "This code creates a job that scans files for missing hashes and sends them to a scanner for hashing.",
                "deliver-leaderboard-cosmetics.ts": "This code is a job that delivers, equips, and revokes leaderboard cosmetics for users based on their leaderboard position.",
                "process-scheduled-publishing.ts": "This code imports functions for creating and getting job dates, and a function for writing to a database. It defines a function for processing scheduled publishing, which updates various tables in the database.",
                "remove-old-drafts.ts": "This code creates a job called 'remove-old-drafts' that runs every day at 2:43 AM and deletes old drafts and deleted models from a database.",
                "push-discord-metadata.ts": "This code imports functions to create a job, read from a database, and integrate with Discord. It defines a job to push Discord metadata and a function to get user Discord metadata from the database.",
                "apply-nsfw-baseline.ts": "This code imports functions for creating and getting job dates, and for writing to a database. It defines a job called \"apply-nsfw-baseline\" that updates the NSFW baseline in the database.",
                "disabled-voted-tags.ts": "This code is a job that runs every 2 minutes to disable and review tags based on voting and moderation.",
                "job.ts": "This code defines a Job type and a createJob function for creating jobs with options. It also includes a getJobDate function for retrieving and setting job dates in a database.",
                "temp-recompute-post-metrics.ts": "This code defines a function called \"tempRecomputePostMetrics\" that creates a job to update post metrics in a database.",
                "update-metrics.ts": "This code imports and creates jobs for updating and refreshing metrics for different sets of data.",
                "process-imports.ts": "This code defines a job named \"process-imports\" that runs every hour and processes pending import jobs.",
                "apply-discord-roles.ts": "This code imports various functions and components related to managing roles in a Discord server. The key functionalities include applying roles based on user activity, applying roles based on paid subscriptions, and applying roles based on leaderboard rankings. The code also includes utility functions for retrieving accounts in a specific role and adding/removing roles from accounts.",
                "prepare-leaderboard.ts": "This code defines several functions and jobs related to a leaderboard system, including preparing leaderboards, updating user leaderboard ranks, and clearing the leaderboard cache.",
                "add-on-demand-run-strategies.ts": "This code creates a job that adds on-demand run strategies to a database table and deletes old ones.",
                "refresh-image-generation-coverage.ts": "A job is created to refresh image generation coverage every 15 minutes using a specified service invocation."
            },
            "webhooks": {
                "base.webhooks.ts": "A function that creates a webhook processor with a specified display name, optional moderator-only flag, and data retrieval function, using a Prisma client.",
                "utils.webhooks.ts": "This code exports a collection of webhook processors and a function to retrieve webhook types with display names.",
                "moderator.webhooks.ts": "This code imports the dayjs library and a function called createWebhookProcessor. It defines a constant called moderatorWebhooks which is a webhook processor for download volume alerts. The getData function returns an empty array.",
                "model.webooks.ts": "This code defines two webhook processors, 'new-model' and 'updated-model', that retrieve data from a database and return results."
            },
            "controllers": {
                "account.controller.ts": "The code includes handlers for getting user accounts and deleting an account, with error handling and data manipulation.",
                "report.controller.ts": "This code includes handlers and services for creating, updating, and retrieving reports with various properties and relationships.",
                "image.controller.ts": "This code includes multiple handlers for image-related functionalities such as getting images, moderating images, deleting images, and updating image details. It also includes helper functions and types for image-related operations.",
                "post.controller.ts": "This code includes functions for handling various operations related to posts, such as creating, updating, deleting, and retrieving posts. It also includes functions for managing post images, tags, and resources.",
                "comment.controller.ts": "This code contains several functions related to handling comments, including getting comments, getting comment reactions, creating/updating/deleting comments, and performing actions such as locking/unlocking comments and marking comments as TOS violations.",
                "notification.controller.ts": "This code includes functions for handling user notifications, including retrieving notifications, toggling notification settings, and marking notifications as read.",
                "user.controller.ts": "This code defines various handlers and functions related to user management and engagement, including getting user information, updating user settings, following/unfollowing users, hiding/unhiding users and models, and toggling model favorites.",
                "model.controller.ts": "This code file contains various handlers for CRUD operations on models, including getting model details, creating/updating models, publishing/unpublishing models, and deleting models.",
                "question.controller.ts": "This code contains handlers for getting, creating, updating, and deleting question data, as well as setting question answers.",
                "answer.controller.ts": "This code includes handlers for getting, creating, updating, and deleting answers, as well as setting answer votes.",
                "review.controller.ts": "This code file contains various handlers for different functionalities related to reviews in an application. Some key components include:\n- Functions for getting reviews with pagination, including filtering and sorting options.\n- Functions for getting reactions on a review.\n- Functions for creating/updating/deleting a review.\n- Functions for toggling reactions on a review.\n- Functions for toggling the exclusion status of a review.\n- Functions for getting details of a review, including associated images and comments.\n- Functions for converting a review into a comment.\n- Functions for locking/unlocking a review and its comments.\n- Functions for marking a review as a violation of terms of service (TOS).\n- Error handling functions for handling various types of errors.",
                "download.controller.ts": "This code includes functions for handling user downloads and hiding downloads, with error handling and data manipulation.",
                "announcement.controller.ts": "This code defines a function that retrieves the latest announcement with specific properties from a database.",
                "tag.controller.ts": "This code file contains various handlers for tag-related functionality, such as getting tags, adding tags, moderating tags, and deleting tags.",
                "resourceReview.controller.ts": "These are handler functions for CRUD operations on resource reviews, including creating, updating, deleting, and upserting resource reviews.",
                "model-file.controller.ts": "This code defines handlers for CRUD operations on model files, including creating, updating, deleting, and retrieving files by version ID.",
                "user-link.controller.ts": "Functions for handling user link operations such as getting, creating, updating, and deleting user links.",
                "reaction.controller.ts": "This code imports functions and types from various modules, defines a function to toggle a reaction, and handles errors.",
                "model-version.controller.ts": "This code includes handlers for various model version operations such as getting, creating, updating, deleting, publishing, and unpublishing model versions. It also includes error handling and authorization checks.",
                "api-key.controller.ts": "This code provides handlers for CRUD operations on API keys, including getting, adding, and deleting API keys.",
                "commentv2.controller.ts": "This code includes functions for handling comments, such as getting comments, upserting comments, deleting comments, and getting comment counts.",
                "stripe.controller.ts": "This code file contains various handler functions that interact with the Stripe service to perform actions such as creating customers, creating subscription sessions, and managing subscriptions.",
                "moderation.controller.ts": "These code snippets define two handler functions: getPreferencesHandler and updatePreferencesHandler. \n\n- getPreferencesHandler: Retrieves the user's allowed moderation tags from the database and returns them as a Record<string, boolean> object.\n- updatePreferencesHandler: Updates the user's allowed moderation tags based on the input provided. It adds or removes tags from the database and refreshes the user's hidden tags and images.",
                "article.controller.ts": "This code exports an asynchronous function that handles the upserting of an article, including checking for admin-only tags."
            },
            "logging": {
                "client.ts": "This code imports the necessary components and creates a client to connect to the Axiom server. It logs data to Axiom if a connection is established."
            },
            "services": {
                "comment.service.ts": "This code provides functions for interacting with comments in a database, including retrieving, creating, updating, and deleting comments.",
                "user-cache.service.ts": "This code defines functions to manage hidden tags, users, models, and images for a specific user.",
                "api-key.service.ts": "This code provides functionality to interact with API keys in a database, including creating, reading, and deleting keys.",
                "system-cache.ts": "This code includes functions to retrieve and cache moderation tags, anonymous tags, system tags, system permissions, category tags, and tags needing review.",
                "moderator.service.ts": "This code tracks and logs moderation activities for different entity types (model, model version, image, tag, report, article).",
                "review.service.ts": "This code provides functions for interacting with reviews, including getting reviews, creating/updating reviews, and deleting reviews.",
                "reaction.service.ts": "This code provides functionality to toggle reactions on different types of entities (questions, answers, comments, images, etc.) and perform database operations.",
                "stripe.service.ts": "This code file contains various functions related to Stripe integration, including retrieving plans, managing subscriptions, creating customers, and handling payments.",
                "model-version.service.ts": "This code includes functions for managing model versions, including creating, updating, publishing, and unpublishing versions.",
                "commentsv2.service.ts": "This code provides functionality for creating, retrieving, updating, and deleting comments, as well as managing comment threads. Key components include database operations using Prisma, error handling, and data retrieval based on various input parameters.",
                "resourceReview.service.ts": "This code includes functions for handling resource reviews, including getting, creating, updating, and deleting reviews.",
                "announcement.service.ts": "This code retrieves the latest announcement from a database, based on certain conditions and filters.",
                "tag.service.ts": "This model's maximum context length is 4097 tokens. However, your messages resulted in 4310 tokens. Please reduce the length of the messages.",
                "account.service.ts": "This code includes functions to get user accounts and delete an account using a database client.",
                "question.service.ts": "This code provides functionality for getting, creating, updating, and deleting questions, as well as setting question answers. The key components include database operations, pagination helpers, and integration with Playfab.",
                "notification.service.ts": "This code includes functions for managing user notifications, notification settings, and creating notifications in a database.",
                "post.service.ts": "The code defines several functions related to posts, including getting posts by category, getting post details, creating and updating posts, and adding/removing tags and images to/from posts.",
                "model-file.service.ts": "This code includes functions for retrieving, creating, updating, and deleting model files from a database.",
                "user.service.ts": "The code includes functions related to user management, such as retrieving user information, updating user data, and managing user engagements with models and articles. It also includes functions for managing user cosmetics and handling user notifications.",
                "image.service.ts": "This code includes various functions related to image management, moderation, and retrieval from a database.",
                "article.service.ts": "This code defines functions for retrieving and manipulating articles, including filtering by various parameters and creating/updating/deleting articles.",
                "report.service.ts": "This code includes functions for creating, retrieving, and updating reports for various entities such as models, comments, images, and articles. It also includes functions for retrieving report counts and retrieving reports for specific entities.",
                "feature-flags.service.ts": "This code defines feature flags and their availability based on user roles and environment variables.",
                "download.service.ts": "This code includes functions for retrieving a user's download history and updating a user's activity.",
                "model.service.ts": "This code includes functions for retrieving, updating, and deleting models, as well as creating new models. It also includes functions for handling model versions and tags associated with models.",
                "user-link.service.ts": "This code file contains functions for managing user links, including retrieving, creating, updating, and deleting user links.",
                "leaderboard.service.ts": "This code includes functions to check if a leaderboard is populated, get the leaderboards, get leaderboard positions, and get a specific leaderboard. It also includes various types and a metric order.",
                "partner.service.ts": "This code exports a function that retrieves partners from a database and shuffles the results.",
                "answer.service.ts": "This code includes functions for getting, creating, updating, and deleting answers, as well as setting answer votes. It uses a database client and a PlayFab client for tracking events.",
                "generation": {
                    "generation.types.ts": "This code defines types and namespaces related to a generation request, including parameters, resources, images, and coverage.",
                    "generation.service.ts": "This code includes functions for generating requests, retrieving and deleting generated images, and checking resource coverage."
                }
            },
            "selectors": {
                "commentv2.selector.ts": "This code defines a Prisma selector for retrieving CommentV2 data, including user, reactions, and childThread information.",
                "model.selector.ts": "This code defines several Prisma selectors for retrieving specific fields from the database models.",
                "modelHash.selector.ts": "This code defines and exports a modelHashSelect function and a ModelHashModel type using Prisma ORM.",
                "tag.selector.ts": "This code defines validators and types for selecting and getting payload data for different tag types.",
                "user.selector.ts": "This code defines two sets of validators and types for selecting user data with different levels of detail.",
                "imagev2.selector.ts": "This code defines selectors and models for retrieving image data with associated user and reaction information.",
                "review.selector.ts": "The code defines selectors for retrieving review details and all reviews, including related data such as images and reactions.",
                "download.selector.ts": "This code imports the Prisma library and defines a validator function for selecting specific fields in a download history.",
                "comment.selector.ts": "This code defines two Prisma validators: commentDetailSelect and getAllCommentsSelect, with specific selected fields and nested selects.",
                "resourceReview.selector.ts": "This code defines a Prisma schema for selecting and retrieving resource reviews with various properties and relationships.",
                "cosmetic.selector.ts": "This code defines and exports types for different types of cosmetic items, such as badges and name plates, with specific properties and data.",
                "generation.selector.ts": "This code imports the Prisma client and defines a validator for selecting specific fields from a model.",
                "notification.selector.ts": "This code imports Prisma and a user selector, and defines a select statement for retrieving all notifications.",
                "article.selector.ts": "This code defines a Prisma select query for retrieving detailed information about an article, including its reactions, tags, and attachments.",
                "modelVersion.selector.ts": "This code defines a Prisma validator that selects specific fields from a ModelVersion table and its related tables. The selected fields include id, modelId, name, createdAt, updatedAt, trainedWords, baseModel, earlyAccessTimeFrame, description, and rank. It also includes fields from the files table such as name, id, sizeKB, type, metadata, pickleScanResult, pickleScanMessage, virusScanResult, scannedAt, and hashes. Additionally, it selects fields from the model table such as name, type, nsfw, poi, and mode. The code also defines a return type for the ModelVersionApi function.",
                "post.selector.ts": "This code imports and defines validators for selecting and editing post images and posts using Prisma.",
                "reaction.selector.ts": "This code defines selectors and validators for fetching reaction details from the Prisma database.",
                "image.selector.ts": "This code defines selectors and helper functions for working with image data in a Prisma-based application."
            }
        },
        "utils": {
            "humanizer.ts": "This code provides a function to convert an array into a human-readable list with customizable separators.",
            "get-client-stripe.ts": "This code exports a function that loads the Stripe library and returns a promise with the Stripe object.",
            "login-helpers.ts": "This code exports a function called \"getLoginLink\" that generates a login link with a return URL and reason.",
            "file-helpers.ts": "This code defines a function to determine the format of a model file based on its filename. It also prepares a file for processing by adding metadata and setting default values.",
            "scroll-utils.ts": "This function scrolls the given element to the top of the page with a smooth animation.",
            "schema-helpers.ts": "This code defines and exports three validation schemas using the zod library: safeUrl, booleanString, and numberString.",
            "query-invalidation-utils.ts": "This code exports a function to invalidate moderated content with debounce functionality using lodash-es.",
            "trpc.ts": "This file sets up a TRPC client with various links and configurations, including authentication and batching.",
            "type-guards.ts": "Three functions to check if a value is defined, a number, or a promise, using different checks and conditions.",
            "markdown-helpers.ts": "This code converts markdown to HTML using the gray-matter, unified, remark-parse, and remark-html libraries.",
            "qs.ts": "The code provides functions for parsing and stringifying query strings with customizable options.",
            "cookies-helpers.ts": "This code imports the setCookie function from the 'cookies-next' library and sets a cookie with a one-year expiration date.",
            "join-helpers.ts": "This code exports a function that generates a join link with a specified return URL and reason.",
            "blurhash.ts": "This code provides functions for encoding an image into a blurhash and getting the clamped size of an image.",
            "fs-helpers.ts": "This code imports the `readdir` function from the `fs/promises` module and defines a function `getFilesWithExtension` that takes a directory path and an array of file extensions as arguments. It recursively searches the directory and its subdirectories for files with the specified extensions and returns an array of file paths.",
            "image-metadata.ts": "The code imports various modules and defines functions for extracting and parsing metadata from an image file. It also includes functions for encoding and auditing the metadata.",
            "image-utils.ts": "This code imports the sharp, blurhash, and arraybuffer-to-buffer libraries and defines a function to convert an image to a blurhash. The function fetches the image, resizes it, and encodes it into a blurhash.",
            "array-helpers.ts": "This code provides various utility functions for manipulating arrays, including sorting, removing duplicates, and shuffling.",
            "notifications.tsx": "Two functions for showing notifications: showErrorNotification displays a red error notification, showSuccessNotification displays a teal success notification.",
            "delivery-worker.ts": "This code includes functions to get a download URL and the status of a delivery worker. It also defines types for download information and bucket information.",
            "domain-link.ts": "This code defines a set of domain links and provides functions to get the type of a domain link and sort a list of domain links.",
            "prompt-helpers.ts": "This code defines regular expressions and functions to split and parse prompt resources based on specific patterns.",
            "html-helpers.ts": "This code includes functions for sanitizing HTML and determining if a color needs to be swapped for a given color scheme.",
            "cf-images-utils.ts": "This code provides functions for uploading and deleting images using the CloudFlare Images API.",
            "date-helpers.ts": "This code provides various functions for formatting, manipulating, and comparing dates using the dayjs library.",
            "object-helpers.ts": "This code exports a function called \"removeEmpty\" that removes empty values from an object using lodash functions.",
            "number-helpers.ts": "This code provides various utility functions for formatting numbers and converting units of measurement.",
            "window-helpers.ts": "This code exports a function that returns the current scroll position of the window using x and y coordinates.",
            "debouncer.ts": "This code provides a debouncer function and a custom hook for debouncing functions in React.",
            "zod-helpers.ts": "This code provides various functions for converting and preprocessing different types of data, such as converting strings to numbers, arrays of strings to arrays of numbers, and comma-delimited strings to arrays. It also includes functions for converting strings to dates and boolean values, as well as sanitizing HTML strings.",
            "s3-utils.ts": "This code provides functionality for interacting with AWS S3, including setting CORS, uploading and deleting objects, and generating signed URLs.",
            "json-helpers.ts": "These functions convert JavaScript objects to JSON strings and vice versa, handling BigInt values as well.",
            "query-string-helpers.ts": "These functions parse a numeric string or an array of numeric strings, returning the parsed values.",
            "logging.ts": "This code includes a function to log events to a database and a function to create a colored logger.",
            "queue.ts": "This code defines two queue classes: QueueOld and Queue. \n\n- QueueOld is an obsolete implementation of a queue that limits the number of pending promises to 1. It uses a static queue array and a static counter for tracking the number of pending promises. It enqueues promises and dequeues them one at a time, executing them in a sequential manner.\n\n- Queue is a newer implementation of a queue that allows for a customizable concurrency limit. It uses a private concurrency limit, tasks array, and running counter for tracking the number of running tasks. It enqueues tasks and dequeues them based on the concurrency limit, executing them concurrently up to the limit.",
            "string-helpers.ts": "This code contains various utility functions for string manipulation, URL handling, and data validation.",
            "callback-helpers.ts": "This code converts a function with a callback into a promise, allowing for easier asynchronous handling."
        },
        "libs": {
            "moderation.ts": "This code defines moderation categories and NSFW levels for content tagging and filtering.",
            "sx-helpers.ts": "This code provides functions to hide or show elements based on the screen size using Mantine's Sx component.",
            "auth.ts": "This code sets a cookie name based on whether the NEXTAUTH_URL starts with 'https://' and adds a prefix if it does.",
            "tags.ts": "This code defines schemas and types for taggable and votable entities, and includes functions for tag display names and getting tag display names.",
            "animations.ts": "This code defines keyframe animations for various effects including wiggle, bounce, heartbeat, vibrate, jello, and falling.",
            "picfinder.ts": "This code is a React hook that allows users to fetch and display images based on a prompt text.",
            "form": {
                "index.ts": "This code exports all components and the useForm hook from their respective files.",
                "hoc": {
                    "withController.tsx": "This is a function that wraps a component and provides controlled input functionality using react-hook-form.",
                    "withWatcher.tsx": "This code provides a higher-order component (HOC) called \"withWatcher\" that wraps a base component and conditionally renders it based on the \"visible\" prop. The \"visible\" prop is a function that determines whether the base component should be visible based on the values passed to it. The \"Watcher\" component is responsible for subscribing to changes in form values and updating the visibility of the base component accordingly."
                },
                "components": {
                    "FieldArray.tsx": "This code is a React component that provides functionality for managing an array of fields in a form.",
                    "NumberInputWrapper.tsx": "This code is a wrapper component for a number input field with additional functionality like formatting and clearing the input.",
                    "RatingWrapper.tsx": "This code exports a component that wraps a Rating component inside an Input Wrapper component.",
                    "TextInputWrapper.tsx": "This code is a wrapper component for a text input with a clear button and additional right section.",
                    "SimpleImageUpload.tsx": "This is a simple image upload component that allows users to upload and display an image.",
                    "MultiSelectWrapper.tsx": "The code provides a wrapper component for a multi-select dropdown with search functionality and loading indicator.",
                    "MultiFileInputUpload.tsx": "This code is a React component that allows users to upload multiple files with a progress bar and file preview.",
                    "index.ts": "This code exports various input components with added functionality for form handling and data watching.",
                    "SelectWrapper.tsx": "This code exports a SelectWrapper component that wraps the Select component from the '@mantine/core' library. The SelectWrapper component takes in data, value, defaultValue, loading, onChange, and other props, and renders a Select component with the provided props. It also handles parsing the data and values, and converts them to the appropriate types.",
                    "Form.tsx": "This code is a React component that renders a form with validation and error handling, and an optional loading overlay."
                },
                "hooks": {
                    "useForm.ts": "This code defines a custom useForm hook that wraps the functionality of react-hook-form library with additional features like schema validation and reset count tracking."
                }
            },
            "tiptap": {
                "extensions": {
                    "Instagram.ts": "This code defines a custom Instagram node for the Tiptap editor, allowing users to embed Instagram posts.",
                    "StrawPoll.ts": "This code defines a custom node for the tiptap editor called \"strawPoll\" that allows embedding StrawPolls.",
                    "CustomImage.ts": "This code defines a custom image extension for the tiptap editor that allows users to upload and display images."
                }
            }
        },
        "env": {
            "other.ts": "This code defines three constants that check the environment for maintenance mode, development mode, and production mode."
        },
        "styles": {},
        "components": {
            "SVG": {
                "IconHuggingFace.tsx": "This code is a React component that renders an SVG icon from the Tabler Icons library."
            },
            "CivitaiLink": {
                "CivitaiLinkProvider.tsx": "This code provides a context and store for managing instances and commands in the Civitai Link application.",
                "CivitaiLinkSuccessModal.tsx": "This code is a React component that renders a success modal with a form to save a name.",
                "shared-types.ts": "This code defines the functionality and components for a socket client using socket.io. It includes event definitions and message types for communication between the client and server. It also includes command and response types for specific commands related to Civitai Link.",
                "CivitiaLinkManageButton.tsx": "This code defines a component called `CivitiaLinkManageButton` that manages the state and behavior of a button. It uses various components and hooks from the `@mantine/core`, `@mantine/hooks`, and `@tabler/icons-react` libraries. The button can have different states (`downloading`, `installed`, `notInstalled`) and displays different icons, colors, and labels based on its state. It also supports tooltips and handles click events.",
                "CivitaiLinkSvg.tsx": "A SVG component with linear gradients, paths, and styles. Uses Mantine theme for fill and stroke colors.",
                "CivitaiLinkPopover.tsx": "This code includes components and functionality for the Civitai Link feature, which allows users to interact with their Automatic1111 Stable Diffusion instance in real-time from Civitai. The code includes components for the Civitai Link popover, the about section, the link dropdown, various status components, the instances manager, the activity list, and the link button.",
                "CivitaiLinkWizard.tsx": "This code imports various components and functions from different libraries and modules, and defines a modal component for the \"Civitai Link Setup\" process. The modal contains a stepper with three steps: \"About Civitai Link\", \"Prepare SD\", and \"Connect SD\". Each step includes different UI elements and functionalities related to setting up and connecting Stable Diffusion instances with Civitai Link.",
                "CivitaiLinkResourceManager.tsx": "This code defines a React component called `CivitaiLinkResourceManager` that manages resources for a specific model. It provides functions to add, remove, and cancel resource downloads, and also tracks the progress of the downloads.",
                "civitai-link-api.ts": "This code provides functions to interact with a CivitaiLinkInstance API, including fetching, creating, updating, and deleting instances."
            },
            "Filters": {
                "SortFilter.tsx": "This code is a Next.js component that renders a sort filter menu based on the current filter type.",
                "FiltersDropdown.tsx": "This code snippet creates a Filters Dropdown component using Mantine and Tabler Icons.",
                "ViewToggle.tsx": "This code is a React component that renders a view toggle button with icons and tooltips.",
                "PeriodModeToggle.tsx": "This code is a React component that renders a toggle switch to select a period mode.",
                "PeriodFilter.tsx": "This code defines a PeriodFilter component that allows users to select a time period for filtering data. It includes a DumbPeriodFilter component for rendering the filter UI and a StatefulPeriodFilter component for managing the filter state. The components use various utility functions and dependencies from external libraries.",
                "index.ts": "Components in this bucket access state from FiltersProvider and include SortFilter, PeriodFilter, and ViewToggle."
            },
            "VotableTags": {
                "VotableTagMature.tsx": "This code snippet is a React component that renders a popover with a list of moderated content tags.",
                "VotableTag.tsx": "This code defines a VotableTag component that allows users to vote on tags and displays the tag's score.",
                "VotableTags.tsx": "This code defines a component called \"VotableTags\" that displays a group of tags with voting functionality.",
                "VotableTagAdd.tsx": "This code is a component that allows users to add votable tags with autocomplete functionality."
            },
            "Settings": {
                "BlurToggle.tsx": "This code provides a BlurToggle component that toggles the blurNsfw property of the current user."
            },
            "FollowUserButton": {
                "FollowUserButton.tsx": "This code is a React component that renders a button to follow or unfollow a user. It uses the Mantine UI library and makes API requests using trpc."
            },
            "FloatingActionButton": {
                "ScrollToTopFab.tsx": "This code is a React component that renders a floating action button that scrolls to the top of the page when clicked.",
                "FloatingActionButton.tsx": "This code defines a FloatingActionButton component that uses Affix, Button, Transition, useDebouncedState, useWindowEvent, and getScrollPosition."
            },
            "Reaction": {
                "ReactionButton.tsx": "This code defines a store and hooks for managing reactions in a React component. It allows users to toggle reactions on entities.",
                "Reactions.tsx": "The code includes components for displaying and interacting with reactions on a post, including buttons, metrics, and user login."
            },
            "UserStatBadges": {
                "UserStatBadges.tsx": "This code defines a component that displays various statistics as badges with icons and text."
            },
            "PermissionIndicator": {
                "PermissionIndicator.tsx": "This code defines a PermissionIndicator component that displays icons and explanations based on user permissions."
            },
            "HideModelButton": {
                "HideModelButton.tsx": "This code exports a component called `HideModelButton` that renders a button or menu item to hide or unhide a model. It uses Mantine UI components and interacts with a user's engaged models."
            },
            "MasonryColumns": {
                "MasonryColumns.tsx": "This code defines a React component called \"MasonryColumns\" that renders a masonry layout of items.",
                "MasonryContainer.tsx": "This code defines a MasonryContainer component that calculates the width and column count for a masonry layout.",
                "masonry.types.ts": "This code defines interfaces and types for rendering items in a Masonry layout, including dimensions and adjustment functions.",
                "masonry.utils.ts": "This code includes hooks for creating masonry-style columns with adjustable heights and widths based on the data provided.",
                "UniformGrid.tsx": "This code defines a React component called UniformGrid that renders a grid layout with uniform-sized items. The grid layout is determined by the columnCount, columnWidth, columnGap, and rowGap properties provided by the useMasonryContainerContext hook. The items to be rendered are passed in as an array through the data prop, and each item is rendered using the RenderComponent component. The itemId function can be used to generate unique keys for each item. If there are no items to render, the empty prop is displayed.",
                "MasonryCarousel.tsx": "This code defines a MasonryCarousel component that displays a carousel of items in a masonry layout.",
                "MasonryProvider.tsx": "This code creates a context and provider for a masonry layout in React, allowing for customization of column width and gap."
            },
            "SignInError": {
                "SignInError.tsx": "This code defines a component called SignInError that displays an error message based on the input error string."
            },
            "FileInputUpload": {
                "FileInputUpload.tsx": "This code defines a FileInputUpload component that allows users to upload files with progress tracking."
            },
            "Collection": {
                "Collection.tsx": "This code is a React component that renders a collection of items, with options for grouping and limiting the number of items displayed. The key components used are `Badge`, `Group`, and `useDisclosure`."
            },
            "Dates": {
                "DaysFromNow.tsx": "A component that calculates and displays the number of days from a given date using the dayjs library."
            },
            "RouterTransition": {
                "RouterTransition.tsx": "This code sets up a router transition effect using the @mantine/nprogress library in a Next.js application."
            },
            "PageLoader": {
                "PageLoader.tsx": "This code imports the createStyles, Center, and Loader components from the '@mantine/core' library and creates a PageLoader component that displays a centered Loader component."
            },
            "Freeze": {
                "Freeze.tsx": "This code includes a component called \"Freeze\" that suspends rendering until a promise is resolved, and a \"DontHideMeBro\" component that prevents hiding of its children through CSS."
            },
            "Post": {
                "DeletePostButton.tsx": "This is a component that renders a delete button for a post and handles the deletion process.",
                "post.utils.ts": "This code includes functions for managing post filters, query parameters, and querying posts and post categories.",
                "Edit": {
                    "PostEditActions.tsx": "This code snippet is a React component that renders buttons for rearranging and deleting a post.",
                    "EditImageDrawer.tsx": "This code imports various components and functions from different libraries and modules, and defines two React components: EditImageDrawer and EditImage. The EditImageDrawer component renders a Drawer component from the Mantine UI library, which displays the EditImage component when an imageId is provided. The EditImage component displays the details of an image and allows the user to edit and save those details.",
                    "EditPostReviews.tsx": "This code defines a React component called EditPostReviews that displays resource reviews for a post. The component includes functionality for fetching and displaying previous and pending reviews, as well as handling alerts and warnings.",
                    "PostEditLayout.tsx": "This code defines a layout component for editing a post, which includes fetching and displaying the post data.",
                    "EditPostDetail.tsx": "This code is an implementation of an edit post detail feature with a rich text editor component.",
                    "EditPostTags.tsx": "This code defines a component called EditPostTags that displays a list of tags for editing a post. It also includes other helper components and hooks for managing tags.",
                    "ReorderImages.tsx": "This code is a React component that allows users to reorder images by dragging and dropping.",
                    "EditPostImages.tsx": "This code is a React component that allows users to edit and manage images within a post. It includes functionality for uploading, displaying, and deleting images.",
                    "EditPostTitle.tsx": "This code snippet is a component that renders a textarea for editing a post title. It includes functionality for debouncing the input and limiting the character count.",
                    "EditPostControls.tsx": "This code snippet is a set of components and functions for managing the status and maturity of a post.",
                    "EditPostProvider.tsx": "This code defines a Zustand store for managing the state of an edit post form. It includes functionality for uploading images and handling image metadata."
                },
                "Detail": {
                    "PostImages.tsx": "This code defines a React component called \"PostImages\" that displays a stack of images with various functionalities and components.",
                    "PostComments.tsx": "This code renders a comment section for a post, including a loader, comments, and a \"show more\" feature.",
                    "PostDetail.tsx": "This code is a React component for rendering a detailed view of a post. It includes functionality for fetching and displaying post data, images, comments, and user information.",
                    "PostControls.tsx": "This code is a React component that displays a menu with options for controlling a post. Key components: Menu, IconEdit, IconFlag, IconTrash, useRouter, LoginRedirect, DeletePostButton, useCurrentUser, openContext."
                },
                "Infinite": {
                    "PostsCard.tsx": "This code defines a component called PostsCard that renders a MasonryCard with an image, reactions, and a link.",
                    "PostCategories.tsx": "This code imports and uses functions and components related to post tags and categories, and displays them in a TagScroller component.",
                    "PostFiltersDropdown.tsx": "This code is a React component that renders a dropdown menu for post filters, based on the current user's preferences.",
                    "PostsInfinite.tsx": "This code is a React component that displays an infinite scrollable feed of posts with various filters and loading states."
                },
                "Categories": {
                    "PostCategoryCard.tsx": "This is a component that displays a card with an image, reactions, and meta information for a post category.",
                    "PostCategoriesInfinite.tsx": "This code exports a component called \"PostCategoriesInfinite\" that displays a list of post categories. It uses other components and functions to fetch and display the categories."
                }
            },
            "OnboardingModal": {
                "OnboardingModal.tsx": "This code is an onboarding modal component that guides users through a step-by-step process to set up their account."
            },
            "ClearableTextInput": {
                "ClearableTextInput.tsx": "A ClearableTextInput component that adds a clear button to a TextInput component for easy clearing of input."
            },
            "ProfileImageUpload": {
                "ProfileImageUpload.tsx": "This is a profile image upload component that allows users to upload and preview an image."
            },
            "SensitiveShield": {
                "SensitiveShield.tsx": "A component that displays sensitive content and prompts users to log in to view it."
            },
            "SelectMenu": {
                "SelectMenu.tsx": "A SelectMenu component that renders a dropdown menu with options and handles selection events."
            },
            "ImageGeneration": {
                "Generate.tsx": "A form for generating images with various input fields, including prompts, aspect ratios, and advanced options.",
                "GeneratedImage.tsx": "This code defines a React component that displays a generated image with loading and error states.",
                "Feed.tsx": "The code is a React component that renders a feed of images with various functionalities like search, sort, filter, and layout toggle.",
                "GeneratedImageLightbox.tsx": "This code is a React component that displays a carousel of images and generation details in a lightbox.",
                "GenerationDetails.tsx": "This code exports a component called GenerationDetails that renders an accordion with a label and a description table.",
                "Queue.tsx": "This code defines a Queue component that displays a list of image generation requests and provides infinite scrolling functionality.",
                "QueueItem.tsx": "This code defines a React component called `QueueItem` that displays information about a generation request in a card format. The key functionalities and components used in this code include buttons, tooltips, icons, badges, text, cards, groups, hover cards, stacks, countdowns, and generated images.",
                "FeedItem.tsx": "This code defines a FeedItem component that displays an image with various actions such as generating, deleting, and creating variants.",
                "FloatingGenerationButton.tsx": "This code imports and utilizes components and functionality related to a floating generation button with an icon and text.",
                "CreateVariantsModal.tsx": "This code is a React component that renders a modal for creating image variants, with sliders for similarity and quantity.",
                "BoostModal.tsx": "A Boost Modal component with a checkbox, button, and alert message that allows users to speed up generation times.",
                "GenerationTabs.tsx": "This code implements a tabbed interface with three tabs: Generate, Queue, and Feed. It also includes icons and a badge for the Queue tab.",
                "UpscaleModal.tsx": "This is a functional component called UpscaleModal that returns an empty JSX element.",
                "GenerationPanel.tsx": "This code imports and uses various components and hooks to create a generation panel with tabs and transitions.",
                "GenerationResources": {
                    "GenerationResourceControl.tsx": "This code is a React component that manages and renders generation resources based on a specified type.",
                    "AddGenerationResource.tsx": "This code is a React component that renders a button to add a generation resource, with a limit and label.",
                    "useGenerationResourceStore.tsx": "This code defines a custom hook called `useGenerationResourceStore` that manages state for generation resources. It includes functions to set, add, update, and remove resources, as well as functions to remove base models and get validated resources. The state includes properties for errors, base models, availability, and a record of resources.",
                    "GenerationResourceModal.tsx": "This code exports a React component that renders a modal for selecting generation resources. It includes search functionality and displays a list of resources with their names and types.",
                    "GenerationResources.tsx": "This code exports a React component called GenerationResources that displays a list of GenerationResource components. The GenerationResource component displays information about a resource and allows the user to update or remove it. The component also includes functionality for handling strength changes and displaying trained words."
                },
                "GenerationForm": {
                    "ResourceSelect.tsx": "The code defines a React component called \"ResourceSelect\" that renders a select input for choosing a resource. It also includes a modal component called \"ResourceSelectModal\" for selecting a resource from a list. The components use various Mantine UI components and hooks for functionality."
                },
                "utils": {
                    "generationFormStorage.ts": "This code defines a generation form schema and provides functionality to parse and format generation data.",
                    "generationRequestHooks.ts": "This code defines several custom hooks for managing generation requests, including fetching, updating, polling, creating, and deleting requests and images.",
                    "index.ts": "This line of code exports an empty object, allowing it to be imported and used in other files."
                },
                "SlateEditor": {
                    "SlateEditor.tsx": "This model's maximum context length is 4097 tokens. However, your messages resulted in 4544 tokens. Please reduce the length of the messages.",
                    "Editor.tsx": "This model's maximum context length is 4097 tokens. However, your messages resulted in 4550 tokens. Please reduce the length of the messages.",
                    "index.ts": "This code defines a custom editor with React and history functionality, and custom element and text types."
                }
            },
            "Countdown": {
                "Countdown.tsx": "This code defines a Countdown component that displays the remaining time between the current time and a specified end time. It uses the useInterval hook from the '@mantine/hooks' library to update the countdown every second. The countdown is calculated using the dayjs library and the duration plugin. The component accepts an endTime prop indicating the end time and an optional refreshIntervalMs prop to control the update interval."
            },
            "HideUserButton": {
                "HideUserButton.tsx": "This code is a React component that renders a button or a menu item to hide or unhide content from a user."
            },
            "RichTextEditor": {
                "MentionList.tsx": "This is a MentionList component that handles keyboard events and displays a list of items with buttons.",
                "InsertStrawPollControl.tsx": "This code snippet is a custom control for a rich text editor that allows users to insert a StrawPoll embed.",
                "InsertYoutubeVideoControl.tsx": "This code snippet is a React component that creates a control for inserting YouTube videos into a rich text editor.",
                "InsertImageControl.tsx": "This code snippet is a React component that allows users to insert images into a rich text editor. It includes functionality to upload images and display them in the editor.",
                "InsertInstagramEmbedControl.tsx": "This code snippet is a component that allows users to insert an Instagram post embed into a rich text editor.",
                "RichTextEditor.tsx": "This code defines a rich text editor component using the Mantine and Tiptap libraries. It supports various formatting options and media embedding.",
                "suggestion.ts": "This code provides a function called `getSuggestions` that returns a suggestion object for a mention list in a rich text editor. The suggestion object has various event handlers and components for rendering and managing the mention list."
            },
            "ImagePreview": {
                "ImagePreview.tsx": "The code defines a React component called ImagePreview that displays an image with additional metadata and options."
            },
            "CivitaiWrapped": {
                "CivitaiSessionProvider.tsx": "This code provides a session context for authentication using Next.js and React, with a custom session state.",
                "ButtonTooltip.tsx": "This code exports a ButtonTooltip component that wraps children inside a Tooltip component using Mantine UI library.",
                "CivitaiTabs.tsx": "This code snippet is a custom component that renders a set of tabs using the Mantine UI library.",
                "CivitaiTooltip.tsx": "This code is a React component that renders a customized tooltip using the '@mantine/core' library."
            },
            "PopConfirm": {
                "PopConfirm.tsx": "This code defines a PopConfirm component that displays a popover with a confirmation message and two buttons."
            },
            "ShareButton": {
                "ShareButton.tsx": "This code snippet is a Share Button component that allows users to share content on social media platforms.",
                "Icons": {
                    "SocialIconCopy.tsx": "This code imports and uses components from the Mantine and Tabler Icons libraries to create a social icon with a copy or check icon inside.",
                    "SocialIconOther.tsx": "This code snippet creates a social media icon with a filled gray background and a \"dots\" icon inside.",
                    "SocialIconReddit.tsx": "This code exports a React component called SocialIconReddit that renders an SVG icon for Reddit.",
                    "SocialIconTwitter.tsx": "This is a React component that renders a Twitter social media icon using SVG."
                }
            },
            "Gallery": {
                "ReportImageButton.tsx": "This code exports a React component called ReportImageButton that wraps another component and adds a click event handler.",
                "GalleryDetailProvider.tsx": "This code defines a context provider and hook for managing state related to a gallery image detail view.",
                "GalleryDetail2.tsx": "This code is a React component that displays a gallery detail page with various components and functionality.",
                "GalleryResources.tsx": "This code imports various components and hooks from different libraries and modules, and renders a gallery resource card with dynamic data.",
                "GalleryCarousel2.tsx": "This code is a gallery carousel component that allows users to navigate through a collection of images.",
                "GalleryImageComments.tsx": "This code is a component that displays comments for a gallery image, including a loader, comment creation, and pagination.",
                "GalleryFilters.tsx": "This code is a React component that provides functionality for filtering and sorting a gallery of images. It includes components for selecting sorting options, period options, and various filters. The state of the filters is managed using Zustand, and cookies are used to persist the filter settings. The component also includes a function for clearing the filters and a component for displaying the number of active filters."
            },
            "SupportButton": {
                "SupportButton.tsx": "This code snippet creates a support button component with a pulsing heart animation on hover."
            },
            "AssociatedModels": {
                "AssociateModels.tsx": "This code is a React component that allows users to associate models with a given resource. It includes functionality for searching and selecting models, dragging and sorting the associated models, and saving the changes. The component also includes various UI components from the Mantine library for rendering the interface.",
                "AssociatedModels.tsx": "This code is a React component that displays a list of associated models with the option to manage them."
            },
            "LoginRedirect": {
                "LoginRedirect.tsx": "This code is a React component called LoginRedirect that redirects the user to a login page if they are not logged in. It takes in children, a reason for the redirect, and an optional returnUrl."
            },
            "AnchorNoTravel": {
                "AnchorNoTravel.tsx": "This code defines a custom Anchor component that prevents the default behavior of clicking on a link and opens it in a new tab instead."
            },
            "IsClient": {
                "IsClient.tsx": "This code exports a React component called IsClient that renders its children only when running on the client side."
            },
            "Meta": {
                "MetaPWA.tsx": "This model's maximum context length is 4097 tokens. However, your messages resulted in 4223 tokens. Please reduce the length of the messages.",
                "Meta.tsx": "This code snippet is a React component that sets the metadata and tags for SEO and social sharing."
            },
            "ContentClamp": {
                "ContentClamp.tsx": "This code snippet defines a component called ContentClamp that uses the Spoiler component from the Mantine library to create a collapsible content section. The component accepts children, maxHeight, and labelSize props, and renders a Show More/Hide button with customizable label size."
            },
            "MaintenanceMode": {
                "MaintenanceMode.tsx": "A maintenance mode page with a centered stack of an hourglass icon, a text message, and an image."
            },
            "Modals": {
                "ReportModal.tsx": "This code imports various components and functions related to reporting and displaying notifications. It also defines a modal for reporting content and exports a function to open the modal.",
                "AssociateModelsModal.tsx": "This code imports components and functions from various modules and creates a modal for managing associated models.",
                "UnpublishModal.tsx": "This code exports a modal component that allows users to unpublish a model or version with a reason and custom message.",
                "ReorderVersionsModal.tsx": "This code defines a React component for a modal that allows the user to reorder versions of a model. It uses the DndKit library for drag and drop functionality and the Mantine library for UI components. The component fetches the versions of the model from an API and displays them in a stack. The user can drag and drop the versions to reorder them, and then save the changes.",
                "BlockModelTagsModal.tsx": "This code imports and exports a modal component that allows users to block specific tags on a model.",
                "RunStrategyModal.tsx": "This code defines a modal component that displays a list of partners and their information, with the ability to generate images using a selected partner.",
                "utils": {
                    "createContextModal.tsx": "This code provides a function to create a context modal with specified name, component, and props."
                }
            },
            "Announcements": {
                "Announcements.tsx": "The code defines a React component called \"Announcements\" that displays an announcement based on certain conditions. The component uses Mantine UI library for styling and includes functionality for dismissing announcements."
            },
            "ModelRating": {
                "ModelRating.tsx": "This code defines a component called ModelRating that displays a rating value and count using Mantine UI components."
            },
            "User": {
                "Username.tsx": "This code defines a React component called \"Username\" that displays a username with optional cosmetics and badges.",
                "UserLink.tsx": "This code is a React component that conditionally renders a link based on the provided username and deletedAt values.",
                "UserImagesFeed.tsx": "This code creates a user images feed with filters and infinite scroll functionality using Mantine components.",
                "UserDraftModels.tsx": "This code is a React component that displays a table of draft models with pagination and delete functionality."
            },
            "MultiActionButton": {
                "MultiActionButton.tsx": "This code defines a `MultiActionButton` component that renders a button with an optional dropdown menu."
            },
            "Leaderboard": {
                "CreatorList.tsx": "This code imports various components and libraries and renders a list of CreatorCards based on the given data.",
                "RankBadge.tsx": "This code defines a RankBadge component that displays a badge with a rank number and optional icon.",
                "LeaderboardMetrics.tsx": "This code defines a React component called \"LeaderboardMetrics\" that displays various metrics with icons and tooltips.",
                "CreatorCard.tsx": "This code exports a React component called \"CreatorCard\" that renders a leaderboard card for a user. It includes functionality for displaying the user's position, avatar, metrics, score, and delta. The component also handles routing to the user's profile page."
            },
            "SortableGrid": {
                "SortableGrid.tsx": "This code snippet is a React component that creates a sortable grid using drag and drop functionality."
            },
            "ListSearch": {
                "ListSearch.tsx": "A search component that allows users to search for models, tags, and users using autocomplete functionality."
            },
            "Image": {
                "image.utils.ts": "This code contains functions and hooks related to querying and filtering images and image categories.",
                "AsPosts": {
                    "ImagesAsPostsCard.tsx": "This code defines a React component called ImagesAsPostsCard that renders a card with images and metadata.",
                    "ImagesAsPostsInfinite.tsx": "This code exports a React component called ImagesAsPostsInfinite that displays a gallery of images. It uses various components from the '@mantine/core' library for styling and layout. It also uses components from other custom components such as ButtonTooltip, PeriodFilter, SortFilter, ImagesAsPostsCard, ModelGenerationCard, and LoginRedirect. The component fetches data using the trpc library and renders the images in a MasonryColumns layout. It also includes filtering options and buttons to add new posts or reviews."
                },
                "Filters": {
                    "ImageCategories.tsx": "This code imports components and functions, retrieves data from an API, and updates the URL query parameters."
                },
                "Ingestion": {
                    "ImageIngestionProvider.tsx": "This code defines a React context and provider for managing the state of image ingestion. It includes functions for fetching and updating image ingestion results."
                },
                "ImageAnalysis": {
                    "ImageAnalysis.tsx": "This code defines two components: \"ImageAnalysis\" and \"ImageAnalysisPopover\". The \"ImageAnalysis\" component displays analysis results for an image, including faces and NSFW assessment. The \"ImageAnalysisPopover\" component wraps the \"ImageAnalysis\" component in a popover to display the analysis results when triggered by a user action."
                },
                "ImageConnectionLink": {
                    "ImageConnectionLink.tsx": "This code is a React component that generates a link with an optional review or model ID. It uses Mantine and Tabler Icons."
                },
                "Detail": {
                    "ImageDetail.tsx": "The code is a React component that displays an image with its details, comments, reactions, and other components.",
                    "ImageDetailComments.tsx": "This code is a React component that renders a comment section for an image with loading and pagination functionality.",
                    "ImageResources.tsx": "This code is a React component that displays a list of image resources with various functionalities and components.",
                    "ImageDetailProvider.tsx": "The code is a React component that provides a context for managing the state of an image detail view. It includes functionality for fetching and displaying images, navigating between images, and handling back button functionality.",
                    "ImageDetailCarousel.tsx": "This code is a carousel component for displaying and navigating through a collection of images.",
                    "ImageDetailContextMenu.tsx": "The code is a React component that renders a context menu for an image detail page. It includes options to edit, delete, report as a Terms of Service violation, and toggle comments."
                },
                "ImageDropzone": {
                    "ImageDropzone.tsx": "This code snippet is a custom Image Dropzone component that allows users to upload images with certain functionalities and components."
                },
                "DeleteImage": {
                    "DeleteImage.tsx": "This code exports a React component called \"DeleteImage\" that takes in an imageId, children, onSuccess, and skipConfirm as props. It uses the trpc library to handle the deletion of an image. If skipConfirm is true, it immediately deletes the image without confirmation. Otherwise, it opens a confirmation modal using the @mantine/modals library. After deletion, it calls the onSuccess function and closes the modal."
                },
                "Infinite": {
                    "ImagesCard.tsx": "This code defines a component called `ImagesCard` that displays an image card with various functionalities and components such as tags, reactions, and image metadata.",
                    "ImageCategories.tsx": "This code imports components and functions from different modules and uses them to create a TagScroller component for image categories.",
                    "ImagesInfinite.tsx": "This code exports a React component called `ImagesInfinite` that fetches and displays a list of images with infinite scrolling. It uses several components and hooks from the `@mantine/core` and other libraries."
                },
                "Categories": {
                    "ImageCategoriesInfinite.tsx": "This code is a component that displays a list of image categories with pagination and action buttons.",
                    "ImageCategoryCard.tsx": "This code defines a component called ImageCategoryCard that displays an image card with various functionalities and components such as reactions, image meta, and image details."
                }
            },
            "TrackView": {
                "TrackView.tsx": "This code is a React component that tracks views of a specific entity and sends the data to the server."
            },
            "ImageProcessing": {
                "ImageProcessingProvider.tsx": "This code provides a React context and provider for scanning and processing images, including NSFW detection.",
                "index.ts": "This line exports all functions and components from the 'ImageProcessingProvider' module."
            },
            "Tags": {
                "TagScroller.tsx": "This code snippet is a React component that creates a scrollable container for displaying tags.",
                "TagsInput.tsx": "TagsInput is a component that allows users to input and manage tags. It includes autocomplete functionality and tag removal."
            },
            "IconBadge": {
                "IconBadge.tsx": "This code defines a component called IconBadge that renders a Badge component with an optional tooltip."
            },
            "ConfirmButton": {
                "ConfirmButton.tsx": "This code snippet is a React component called ConfirmButton that renders a button with confirmation functionality."
            },
            "DomainIcon": {
                "DomainIcon.tsx": "This code defines a function that returns an icon component based on a given domain or URL."
            },
            "Social": {
                "SocialButton.tsx": "This code defines a SocialButton component that renders a button with an icon and label based on the provided provider.",
                "SocialLabel.tsx": "This code exports a component called SocialLabel that displays an icon and label based on the type provided.",
                "Social.tsx": "This code defines buttons for various social media platforms with different colors and hover effects."
            },
            "VerifiedShield": {
                "VerifiedShield.tsx": "The code defines a component called VerifiedShield that displays a shield icon with a popover containing information about a file's virus scan status."
            },
            "EdgeImage": {
                "EdgeImage.tsx": "This code defines a React component called EdgeImage that takes in various image properties and renders an optimized image using the getEdgeUrl function."
            },
            "AbsoluteCenter": {
                "AbsoluteCenter.tsx": "This code defines a component called AbsoluteCenter that centers its children vertically and horizontally using absolute positioning."
            },
            "LoginPopover": {
                "LoginPopover.tsx": "This code defines a LoginPopover component that displays a popover with a login prompt if the user is not authenticated."
            },
            "ShowHide": {
                "ShowHide.tsx": "This code defines a component called \"ShowHide\" that renders a Badge with customizable status, position, and onClick functionality."
            },
            "ImageHash": {
                "ImageHash.tsx": "This code is a React component that renders a BlurhashCanvas with customizable size, style, and cropping focus."
            },
            "TrainedWords": {
                "TrainedWords.tsx": "This code defines a React component called \"TrainedWords\" that displays a list of trained words. It uses components from the Mantine UI library, such as CopyButton, Tooltip, and Badge. The component takes an array of trained words, an array of files, a model type, and a limit as props. It also defines another component called \"TrainingWordBadge\" that displays a single word with a copy button and tooltip."
            },
            "FileInfo": {
                "FileInfo.tsx": "This code snippet is a React component that displays file information and metadata in a popover when clicked."
            },
            "MasonryGrid": {
                "MasonryGrid.tsx": "This code implements a Masonry Grid component that uses the Mantine UI library and Masonic for rendering and positioning items in a grid layout.",
                "MasonryCard.tsx": "This code defines a component called \"MasonryCard\" that extends the \"Card\" component from the Mantine library. It adds additional props for height and uniform layout. The component generates a random background gradient based on the Mantine theme colors.",
                "MasonryGrid2.tsx": "The code is a React component called `MasonryGrid2` that implements a masonry grid layout with infinite scrolling functionality. It uses various hooks and components from the `@mantine/core`, `masonic`, `@mantine/hooks`, `@react-hook/window-size`, and `react-intersection-observer` libraries."
            },
            "Logo": {
                "LogoBadge.tsx": "This code is a LogoBadge component that renders a logo using SVG and Mantine's Box component.",
                "Logo.tsx": "This code defines a Logo component that renders an SVG logo with customizable size and styling."
            },
            "AlertWithIcon": {
                "AlertWithIcon.tsx": "This code defines a component called \"AlertWithIcon\" that renders an alert with an icon and customizable properties."
            },
            "Model": {
                "model.utils.ts": "This code includes functions and components related to querying and filtering models and model categories.",
                "ModelHash": {
                    "ModelHash.tsx": "A component that displays a model hash with options to copy and switch between different hash types."
                },
                "HowToUseModel": {
                    "HowToUseModel.tsx": "This code provides a tooltip with a link to instructions based on the given model type."
                },
                "ModelFileAlert": {
                    "ModelFileAlert.tsx": "This code renders different alerts based on the model type and file types present in the \"files\" array."
                },
                "ModelForm": {
                    "FileList.tsx": "This code defines a FileList component that allows users to add, remove, and upload files. The component uses various dependencies and components from different libraries, including @mantine/core, @prisma/client, @tabler/icons-react, react, and react-hook-form. It also includes helper functions and constants for file types and formats."
                },
                "ModelDiscussion": {
                    "ModelDiscussionV2.tsx": "This is a component for displaying a discussion section for a model, including comments and hidden comments.",
                    "ModelDiscussion.tsx": "This code is a React component that displays a discussion section for a model, including reviews and comments. It uses the Mantine UI library and infinite scrolling.",
                    "ReviewDiscussionMenu.tsx": "This code defines a ReviewDiscussionMenu component that displays a menu with various options for a review. The key functionality includes deleting a review, editing a review, locking/unlocking a review, excluding/unexcluding a review from the average score, converting a review to a comment, and reporting a review. The component receives props such as the review data, user data, size, and whether to hide the lock option.",
                    "ReviewDiscussionItem.tsx": "The code imports various components and hooks from different libraries and custom components. It renders a review discussion item with a user avatar, rating, images, text, reactions, and comments.",
                    "CommentDiscussionItem.tsx": "This component renders a comment discussion item with user avatars, reactions, and comment details.",
                    "CommentDiscussionMenu.tsx": "This code is a React component that renders a menu for managing comments, with options like deleting, editing, locking, hiding, reporting, etc."
                },
                "EarlyAccessAlert": {
                    "EarlyAccessAlert.tsx": "A React component that displays an alert for early access to a model, allowing users to receive notifications."
                },
                "ScheduleModal": {
                    "ScheduleModal.tsx": "A modal component for scheduling a model with date and time inputs, using form validation and submission."
                },
                "Actions": {
                    "ToggleLockModel.tsx": "This code exports a React component that toggles the lock state of a model. It uses the trpc library for API communication."
                },
                "ModelVersions": {
                    "ModelVersionDetails.tsx": "This code imports various components and hooks from different libraries and modules for a model version details page.",
                    "DownloadButton.tsx": "The code defines a DownloadButton component that can be customized with different props and renders a button with an optional icon and tooltip."
                },
                "Discussion": {
                    "ModelDiscussionComments.tsx": "This code imports components from the '@mantine/core' library and the '~/components/CommentsV2' module. It renders a comment section with features like loading, creating comments, showing more comments, and displaying badges.",
                    "ModelDiscussionDetail.tsx": "The code is a React component that renders a detailed view of a model discussion comment. It includes components such as LoadingOverlay, UserAvatar, Badge, CommentProvider, RenderHtml, CommentReactions, NotFound, Title, and ModelDiscussionComments. The component retrieves data for the comment using trpc.commentv2.getSingle.useQuery and generates a return URL based on the thread data.",
                    "ModelDiscussionsInfinite.tsx": "This code is a React component that displays a list of comments for a model, with infinite scrolling functionality.",
                    "ModelDiscussionsCard.tsx": "This code imports various components and hooks for rendering and managing discussions/comments in a model.",
                    "ModelDiscussionContextMenu.tsx": "The code is a React component that renders a context menu for a model discussion. It includes functionality for editing, deleting, and reporting comments."
                },
                "ModelVersionList": {
                    "ModelVersionList.tsx": "This code is a React component that renders a scrollable list of model versions with various functionalities and components."
                },
                "Infinite": {
                    "ModelsInfinite.tsx": "This is a React component that displays a list of models with infinite scrolling and filtering options.",
                    "ModelFiltersDropdown.tsx": "This code is a React component that renders a dropdown menu for filtering models. It includes various components such as buttons, chips, and popovers.",
                    "ModelCard.tsx": "This code imports and uses various components and functionalities from the Mantine, Next, and Tabler libraries."
                },
                "Categories": {
                    "ModelCategoryCard.tsx": "This code is a React component that renders a card for a model category. It includes various components and functionality such as badges, ratings, comments, and a context menu.",
                    "ModelCategoriesInfinite.tsx": "The code defines a component called ModelCategoriesInfinite that displays a list of model categories. It uses various components and utility functions to handle filtering, fetching data, and rendering the category list."
                },
                "Generation": {
                    "ModelGenerationCard.tsx": "This code imports and uses various components from different libraries to create a model generation card. The card displays generated images and allows users to navigate through them. Users can also select different prompts and perform editing actions on the prompts.",
                    "GenerationPromptModal.tsx": "A modal component for adding or editing exploration prompts with form inputs and submit button."
                },
                "ModelCarousel": {
                    "ModelCarousel.tsx": "A carousel component that displays images with various functionalities like reactions, meta information, and controls."
                }
            },
            "JoinPopover": {
                "JoinPopover.tsx": "This code defines a JoinPopover component that renders a popover with a message and a button. It uses Zustand for state management."
            },
            "ResourceReview": {
                "EditResourceReviewModal.tsx": "This code imports and exports a modal component for editing a resource review, including buttons and form functionality.",
                "ResourceReviewForm.tsx": "A form component that includes rating and rich text editor inputs, with validation and submission functionality.",
                "ResourceReviewCarousel.tsx": "This code defines a React component called ResourceReviewCarousel that displays a carousel of images. The component receives three props: username, modelVersionId, and reviewId. It uses the Mantine UI library to create the carousel and other UI elements. The component fetches images using the useQueryImages hook and filters them based on the provided props. It then renders the images in the carousel, along with reaction buttons and a meta popover. If there are more images available, a \"View more\" button is displayed.",
                "ResourceReviewDetail.tsx": "This code is a React component that displays the details of a resource review, including the user's rating, comments, and related posts. It also provides functionality to edit the rating and details of the review.",
                "ResourceReviewMenu.tsx": "This is a component that renders a menu with various actions for a resource review. Key components include Menu, Menu.Target, Menu.Dropdown, and Menu.Item.",
                "resourceReview.utils.ts": "These functions handle the creation and updating of resource reviews, including invalidating and updating cached data.",
                "EditResourceReview.tsx": "This code is a React component that allows users to edit and submit a resource review. It includes functionality for rating the resource, adding/editing review comments, and saving the changes.",
                "ResourceReviewComments.tsx": "This code imports and uses components from the '@mantine/core' and '~/components/CommentsV2' libraries to display review comments.",
                "ResourceReviewsGrid.tsx": "This code is a React component that displays a grid of resource reviews with pagination and loading states.",
                "ResourceReviewCard.tsx": "This code imports and uses various components from the '@mantine/core' library to create a resource review card.",
                "EditUserResourceReview.tsx": "This code defines a React component for editing user resource reviews. It includes form handling, rating, and comment functionality.",
                "Summary": {
                    "ResourceReviewSummary.tsx": "This code defines a React component called ResourceReviewSummary that displays the summary of a resource review. It includes a header section showing the average rating and total count of reviews, and a totals section showing the distribution of ratings. The component uses a context to share data between its child components."
                }
            },
            "UserAvatar": {
                "UserAvatar.tsx": "This code defines a UserAvatar component that displays a user's avatar, username, and additional information."
            },
            "CommentSection": {
                "CommentSection.tsx": "This code is a Comment Section component that allows users to add comments and view existing comments.",
                "CommentSectionItem.tsx": "This code is a React component that renders a comment section item with various functionalities like editing, deleting, reacting, and reporting comments."
            },
            "DismissibleAlert": {
                "DismissibleAlert.tsx": "This code defines a DismissibleAlert component that displays an alert message that can be dismissed by the user. It uses the @mantine/core and @mantine/hooks libraries."
            },
            "CreatorCard": {
                "CreatorCard.tsx": "This code defines a `CreatorCard` component that displays information about a user, including their avatar, rank, follower count, and various statistics. It also includes links to the user's social media profiles."
            },
            "HomeContentToggle": {
                "HomeContentToggle.tsx": "This code snippet imports and uses various components and hooks to create a segmented control for toggling between different home content options. The selected option is stored in local storage and the URL is updated accordingly."
            },
            "YoutubeEmbed": {
                "YoutubeEmbed.tsx": "This code snippet creates a YoutubeEmbed component that renders an embedded YouTube video with responsive dimensions."
            },
            "EndOfFeed": {
                "EndOfFeed.tsx": "This code renders a component that displays a message indicating the end of a feed with a clock icon and a link to scroll back to the top."
            },
            "ActionIconSelect": {
                "ActionIconSelect.tsx": "ActionIconSelect is a component that provides a dropdown menu with search functionality for selecting items."
            },
            "Report": {
                "NsfwForm.tsx": "This code defines three forms (ImageNsfwForm, ModelNsfwForm, ArticleNsfwForm) for reporting NSFW content. It also includes a component (ModerationTagsInput) for selecting moderation tags.",
                "OwnershipForm.tsx": "The code imports various components from different libraries and creates a form for ownership details with validation.",
                "AdminAttentionForm.tsx": "This code imports and uses React components to create a form with radio buttons and a text area.",
                "TosViolationForm.tsx": "A form component for reporting Terms of Service violations, with a radio group for selecting the violation type.",
                "create-report-form.tsx": "This code exports a function `createReportForm` that creates a form component with validation using `zod` library.",
                "ClaimForm.tsx": "ClaimForm is a component that creates a report form with email and comment fields using given schema."
            },
            "BrowsingMode": {
                "BrowsingMode.tsx": "This code defines components and functionality related to browsing mode and content filtering options."
            },
            "ImageGuard": {
                "ImageGuard.tsx": "The code is a React component that provides functionality for managing and displaying images with NSFW (Not Safe For Work) content. It includes components for toggling the display of NSFW images, reporting NSFW images, and managing connections to other entities. The code also includes a store for managing the state of the NSFW images and connections."
            },
            "ReactionPicker": {
                "ReactionPicker.tsx": "This code defines a ReactionPicker component that allows users to react to a review with emojis."
            },
            "ImageMeta": {
                "ImageMeta.tsx": "The code defines two components: `ImageMeta` and `ImageMetaPopover`. \n\n- `ImageMeta` displays metadata about an image, including labels and values. It also provides functionality to copy the metadata and start creating a new image.\n- `ImageMetaPopover` is a popover component that wraps around `ImageMeta` and displays the metadata when triggered by a user action."
            },
            "NoContent": {
                "NoContent.tsx": "A component that displays a message and an icon when no results are found, with customizable text and styling."
            },
            "Article": {
                "ArticleContextMenu.tsx": "This code is a React component that renders a menu with various actions for an article, including delete, unpublish, edit, and report.",
                "UserDraftArticles.tsx": "This code is a React component that displays a table of draft articles with pagination and delete functionality.",
                "ToggleArticleEngagement.tsx": "This code is a React component that toggles the engagement of an article (e.g., favorite, like) for a user.",
                "ArticleUpsertForm.tsx": "This code is a React component that renders a form for creating or editing an article. It includes various input fields and buttons for saving and publishing the article.",
                "article.utils.ts": "This code provides functionality for filtering and querying articles based on various parameters and categories.",
                "Detail": {
                    "TableOfContent.tsx": "This code is a table of contents component that displays headings and allows users to scroll to each heading.",
                    "AttachmentCard.tsx": "This code defines a functional component called AttachmentCard that renders a card with an attachment. The component takes in props such as id, name, sizeKB, and url. The attachment card displays an icon and information about the attachment, such as the name and size in kilobytes. The card is clickable and can be downloaded when clicked.",
                    "ArticleDetailComments.tsx": "This code renders a comment section for an article with a loader, create comment form, and comments display.",
                    "Sidebar.tsx": "This code defines a Sidebar component that displays a table of contents and attachments for an article."
                },
                "Infinite": {
                    "ArticleCard.tsx": "This is a component for rendering an article card with various information such as title, user, tags, and stats.",
                    "ArticleCategories.tsx": "This code imports necessary components and functions, fetches article categories, handles tag selection, and renders a TagScroller component.",
                    "ArticleAltCard.tsx": "This code snippet is a React component that renders an article card with various information and functionalities.",
                    "ArticlesInfinite.tsx": "This code is a React component that displays a list of infinite articles with loading, filtering, and pagination functionality."
                },
                "Categories": {
                    "ArticleCategoriesInfinite.tsx": "This code is a React component that renders a list of article categories with infinite scrolling functionality."
                }
            },
            "Account": {
                "ApiKeysCard.tsx": "This code is a React component that displays a card with a list of API keys. It allows users to add, delete, and view API keys.",
                "HiddenUsersSection.tsx": "This code is a React component that renders a section for managing hidden users. It includes functionality for searching and hiding users. The key components used are Autocomplete, Badge, Card, Group, Skeleton, Stack, Text, and Title.",
                "ModerationCard.tsx": "A moderation card component with sections for hidden tags, hidden users, and mature content settings.",
                "SocialLinkModal.tsx": "This code is a React component that renders a modal with a form for creating or updating a social link.",
                "HiddenTagsSection.tsx": "This code is a React component that renders a section for hiding tags. It includes functionality for searching and toggling blocked tags.",
                "RemoveAccountCard.tsx": "This code is a React component that renders a card with a title, a form, and a button to remove an account.",
                "DeleteCard.tsx": "This code snippet is a React component that displays a card with a title, description, and a delete button. When the delete button is clicked, a confirmation modal is opened, asking the user if they are sure they want to delete their account. If confirmed, another modal is opened, asking if the user wants to delete their models as well. If confirmed, the `deleteAccountMutation` function is called to delete the account and models.",
                "ApiKeyModal.tsx": "This code is a React component for an API Key Modal that allows users to generate and manage API keys.",
                "ProfileCard.tsx": "This code is a React component that renders a profile card with various input fields for user profile customization. It uses the Mantine UI library and communicates with the server using trpc.",
                "SocialLink.tsx": "This code snippet is a component that displays a social link with options to edit and delete it.",
                "NotificationsCard.tsx": "This code is a React component that renders a card with a title and a list of notification settings switches.",
                "TagsCard.tsx": "This code snippet is a React component that renders a card with functionality to manage hidden tags.",
                "SettingsCard.tsx": "This code snippet is a React component that renders a settings card with various options for user preferences.",
                "AccountsCard.tsx": "This code renders a card component that displays a table of connected accounts and allows users to connect or remove accounts.",
                "SocialProfileCard.tsx": "This code is a React component that renders a social profile card with social and sponsorship links.",
                "SubscriptionCard.tsx": "This code imports components from various libraries and renders a subscription card with dynamic data."
            },
            "CategoryTags": {
                "CategoryTags.tsx": "This code defines a component called CategoryTags that displays a scrollable list of tags. It uses Mantine and Tabler Icons."
            },
            "Resource": {
                "UploadTracker.tsx": "This code is a React component that displays a popover with a list of uploading files and their progress.",
                "Files.tsx": "This code is a React component that allows users to upload and manage files. It includes functionality such as file dropzone, file upload progress, file type selection, and file deletion.",
                "ModelFileProvider.tsx": "This function is a model file provider component that returns an empty fragment.",
                "FilesProvider.tsx": "This code defines a React context and provider for managing files and their metadata in an application.",
                "Forms": {
                    "ModelVersionUpsertForm.tsx": "This code is a form component for creating or updating a model version. It includes various input fields and validation.",
                    "PostUpsertForm.tsx": "The code includes a form for creating or updating a post, with various components and functionality such as image uploading, post management, and publishing.",
                    "ModelUpsertForm.tsx": "A form component for creating or updating a model, including various input fields and validation."
                },
                "Wizard": {
                    "ModelVersionWizard.tsx": "The code is a React component that implements a wizard-like interface for creating or editing a model version.",
                    "Wizard.tsx": "A Wizard component that allows for step-by-step navigation through a series of steps/components. Components include Stepper, WizardSteps, and WizardStep.",
                    "ModelWizard.tsx": "A model creation wizard with multiple steps, including model and version editing, file upload, and post creation."
                }
            },
            "VerifiedText": {
                "VerifiedText.tsx": "This code exports a React component called VerifiedText that displays the status and details of a verified file."
            },
            "CommentsV2": {
                "index.tsx": "This code exports Comment, CreateComment, CommentsProvider, and ToggleLockComments components for use in other files.",
                "CommentsProvider.tsx": "This code defines a CommentsProvider component that manages comments and provides a context for accessing comment data. It also includes a useNewCommentStore hook that manages a zustand store for adding, editing, and deleting comments.",
                "ToggleLockComments.tsx": "This code is a React component that toggles the lock status of comments and updates the UI accordingly.",
                "Comment": {
                    "CommentBadge.tsx": "This code imports and uses the CommentBadge component to display a badge with a label and color.",
                    "CommentProvider.tsx": "This code defines a CommentProvider component that provides context for managing comments, including permissions and badges.",
                    "CommentForm.tsx": "This code imports and utilizes various components and functionalities for a comment form with rich text editing capability.",
                    "DeleteComment.tsx": "This code exports a React component called \"DeleteComment\" that handles the deletion of a comment. It uses various components and functions from external libraries and modules.",
                    "Comment.tsx": "This code defines a Comment component that displays a user comment along with various actions and controls.",
                    "CreateComment.tsx": "This code defines a component called CreateComment that displays a form for users to add comments.",
                    "CommentReactions.tsx": "This code is a React component that displays reactions for a comment, including like, dislike, heart, laugh, and cry."
                }
            },
            "EmailLogin": {
                "EmailLogin.tsx": "This code is a React component for an email login form that uses Mantine UI components and NextAuth for authentication."
            },
            "BackButton": {
                "BackButton.tsx": "This code defines two components: NavigateBack and BackButton, which handle navigation and provide a back button functionality."
            },
            "RunStrategy": {
                "GenerateButton.tsx": "This code defines a GenerateButton component that renders a button with an icon and optional text. The button can open a generation panel when clicked.",
                "RunButton.tsx": "This code snippet defines a RunButton component that renders a button with a tooltip and an icon."
            },
            "Downloads": {
                "DownloadList.tsx": "This code is a component that renders a list of downloads with a clickable link and a delete button."
            },
            "Canny": {
                "CannyBoard.tsx": "This code defines a CannyBoard component that displays an alert if Canny is disabled or not configured.",
                "CannyProvider.tsx": "This code initializes the Canny SDK and identifies the current user by passing their information to Canny."
            },
            "Tooltips": {
                "StatTooltip.tsx": "This code is a React component that renders a tooltip with a label and a value. It uses Mantine UI components and a helper function for number formatting."
            },
            "ColorSchemeToggle": {
                "ColorSchemeToggle.tsx": "This code snippet is a Color Scheme Toggle component that allows users to switch between light and dark mode. The component uses Mantine UI library and Tabler Icons."
            },
            "RenderHtml": {
                "RenderHtml.tsx": "This code defines a React component called `RenderHtml` that renders HTML content with custom styles and functionality."
            },
            "DescriptionTable": {
                "DescriptionTable.tsx": "This is a React component that renders a description table with customizable labels, values, and appearance."
            },
            "Notifications": {
                "NotificationList.tsx": "This is a component called NotificationList that displays a list of notifications with various functionalities.",
                "NotificationBell.tsx": "This code snippet is a React component that implements a notification bell with a dropdown popover. It fetches and displays notifications for the current user, allows marking notifications as read, and provides links to notification settings and a notification list."
            },
            "ImageUpload": {
                "SortableItem.tsx": "This code is a React component that enables sorting functionality using the @dnd-kit/sortable library.",
                "ImageUpload.tsx": "The code defines a component called `ImageUpload` that allows users to upload images with various functionalities.",
                "ImageUploadPreview.tsx": "This code defines a React component called ImageUploadPreview that displays an image with drag and drop functionality."
            },
            "ClearableAutoComplete": {
                "ClearableAutoComplete.tsx": "A ClearableAutoComplete component that adds a clear button to the Autocomplete component for clearing the input field."
            },
            "Stripe": {
                "DonateButton.tsx": "The code imports necessary components and functions, and defines a DonateButton component that handles donation functionality.",
                "SubscribeButton.tsx": "This code defines a SubscribeButton component that handles subscription creation with Stripe and user authentication.",
                "PlanBenefitList.tsx": "This code exports a component called `PlanBenefitList` that renders a list of benefits with icons.",
                "PlanDetails.tsx": "This code defines a component called `PlanDetails` that displays details of a subscription plan, including its name, price, benefits, and description.",
                "ManageSubscriptionButton.tsx": "This code is a React component that manages a subscription button with a click handler and loading state."
            },
            "Questions": {
                "DeleteAnswer.tsx": "This code is a React component that allows the user to delete an answer, showing confirmation modals and notifications.",
                "QuestionAnswerComments.tsx": "This code is a React component that renders a list of comments with a loader and a \"show more\" button.",
                "QuestionDetails.tsx": "This code defines a component called \"QuestionDetails\" that displays the details of a question, including the question title, tags, user avatar, content, favorite badge, and comments. It also includes functionality for deleting and editing the question.",
                "DeleteQuestion.tsx": "This code is a React component that deletes a question. It uses modals for confirmation and notifications for success/error.",
                "AnswerVotes.tsx": "This code defines a component called \"AnswerVotes\" that allows users to vote on answers to a question. It includes functionality to increment and decrement the vote count, as well as updating the vote status in the database. The component also includes sub-components for the vote buttons, \"AnswerVoteCheck\" and \"AnswerVoteCross\", which display the vote count and handle the click events for voting.",
                "AnswerDetail.tsx": "This code is a component that displays the details of an answer to a question. It includes functionality for editing and deleting the answer, as well as displaying user avatars, reactions, and comments.",
                "Questions.Provider.tsx": "A component that displays a list of questions with sorting, filtering, and pagination functionality.",
                "QuestionInfoModal.tsx": "This is a question and answer platform where users can ask and answer questions on various topics.",
                "ReactionBadge.tsx": "This code is a React component that renders a button with an optional tooltip.",
                "AnswerForm.tsx": "This code snippet is a React component that renders a form for submitting an answer to a question. \nIt uses various components and utilities from different libraries to handle form validation, API requests, and UI rendering.",
                "QuestionForm.tsx": "This is a form component for creating or editing a question with title, content, and tags inputs.",
                "FavoriteBadge.tsx": "This code defines a FavoriteBadge component that displays a badge with a heart icon and a count. It allows users to toggle their reaction to a specific entity."
            },
            "CategoryList": {
                "CategoryList.tsx": "CategoryList component renders a list of categories with items in a masonry layout. It supports pagination and actions for each category.",
                "CategoryListEmpty.tsx": "This code defines a component that displays an empty category list with a message and a link to create a new item."
            },
            "AppLayout": {
                "AppLayout.tsx": "This code defines the AppLayout component, which renders the layout of the app based on the user's ban status. It includes components such as AppShell, Button, Center, Group, Stack, Text, ThemeIcon, Title, AppHeader, AppFooter, SideNavigation, FloatingGenerationButton, and uses hooks like useMantineTheme, useCurrentUser, and useFeatureFlags.",
                "AppHeader.tsx": "The code imports various components and hooks from different libraries and defines a header component with various functionalities and styles.",
                "SideNavigation.tsx": "This code snippet creates a side navigation component using the Navbar component from the Mantine library.",
                "AppFooter.tsx": "This code snippet is a React component that renders a footer with various buttons and text.",
                "NotFound.tsx": "This code imports and uses various components from the Mantine and Next libraries to create a custom 404 page."
            },
            "Moderation": {
                "ModerationNav.tsx": "This code snippet creates a moderation navigation menu with dropdown functionality using Mantine and Tabler Icons."
            },
            "Media": {
                "MediaNsfwToggle.tsx": "This code is a React component that renders a toggle button and placeholder for NSFW (Not Safe for Work) content.",
                "sfwContent.tsx": "This code checks if the content is NSFW and displays it only if the user has enabled NSFW content.",
                "SfwToggle.tsx": "The code is a React component that toggles the display of content based on the user's authentication status.",
                "MediaCount.tsx": "This code is a React component that renders a badge with a count, positioned in the top right corner.",
                "sfwStore.ts": "This code creates a Zustand store with functions to toggle boolean values for showing reviews, models, and images.",
                "SFW.tsx": "The code defines a React component called \"SFW\" that handles the display of safe for work (SFW) content. It includes functionality for toggling NSFW content, displaying media counts, and rendering SFW content.",
                "SfwPlaceholder.tsx": "This code imports the useSfwContext hook from the sfwContext component and renders a placeholder if nsfw is true.",
                "sfwContext.ts": "This code defines a React context called SfwCtx that provides access to a shared state object."
            }
        },
        "hooks": {
            "useRouterParams.ts": "This code snippet provides a function called \"useRouterParams\" that parses the router query parameters using a Zod schema.",
            "useCFImageUpload.tsx": "This code is a React hook that provides functionality for uploading files to a Cloudflare server and tracking the upload progress.",
            "useZodRouteParams.ts": "This code defines a custom hook called useZodRouteParams that uses the useRouter hook from the next/router package. It also uses the useMemo hook from React and the zod library for data validation. The hook takes in a schema parameter of type TSchema and returns an object with the query data and a replace function for updating the query parameters.",
            "useCurrentUser.ts": "This code exports a custom hook named useCurrentUser that uses the useCivitaiSessionContext hook from the CivitaiSessionProvider component.",
            "useHeadingsData.ts": "This code defines two custom hooks: `useHeadingsData` and `useIntersectionObserver`. The `useHeadingsData` hook retrieves the headings from an article and returns them as nested data. The `useIntersectionObserver` hook uses the Intersection Observer API to track the visibility of headings and updates the active heading based on visibility.",
            "useModelFilters.ts": "This code defines a hook called useModelFilters that manages and updates filters for a model.",
            "useAspectRatioFit.tsx": "This code provides a custom React hook called \"useAspectRatioFit\" that calculates the dimensions of an element while maintaining its aspect ratio. It uses the \"calculateAspectRatioFit\" function to determine the width and height based on the source image dimensions and the maximum available width and height. The hook also handles resizing of the element by using the \"useDebouncedState\" hook to debounce the resize event and update the dimensions accordingly.",
            "useFormStorage.ts": "This code defines a custom hook called `useFormStorage` that handles form state persistence in localStorage.",
            "useS3Upload.tsx": "This code is a React hook that provides tools for uploading files to Amazon S3. It includes a file input component, functions for opening a file dialog, and uploading files to S3.",
            "useIsMounted.ts": "This React hook returns a function that checks if the component is mounted or not.",
            "useCatchNavigation.tsx": "This code implements a custom hook called \"useCatchNavigation\" that displays an alert message when the user tries to close the tab/window or navigate away from the page, if there are unsaved changes in a form. The hook uses the Router from the Next.js library and the useEffect hook from React.",
            "useImageUpload.tsx": "This code defines a custom hook called useImageUpload that handles uploading and processing images.",
            "useMasonryColumns.ts": "A custom hook that calculates the number of columns and dimensions for a masonry layout based on input data.",
            "useIsClient.ts": "This is a React hook that checks if the code is running on the client-side and returns a boolean value.",
            "useIsMobile.ts": "This code snippet defines a custom hook called useIsMobile that checks if the current screen size is mobile."
        },
        "client-utils": {
            "cf-images-utils.ts": "This code exports a function called `getEdgeUrl` that generates a URL for an image with specified transformations and parameters. The function takes in a source URL and an object of variant parameters, and returns the generated URL."
        },
        "workers": {
            "civitai-link.worker.ts": "This code sets up a socket connection, handles socket events, and manages shared state and events.",
            "image-processing-worker-types.ts": "This code defines types and messages for image processing and analysis, including status updates and error handling.",
            "image-processing.worker.ts": "This code defines a shared worker that performs image analysis, including NSFW detection and face detection.",
            "civitai-link-worker-types.ts": "This code defines types and interfaces for a CivitaiLink instance, including connection status and message types."
        },
        "pages": {
            "index.tsx": "The code is for a home page component that displays models and allows users to filter and toggle views.",
            "bugs.tsx": "This code imports environment variables, renders a Canny board component inside a container component.",
            "pricing.tsx": "This code is a React component that displays pricing and membership information. It uses various components and hooks for fetching data and rendering UI elements.",
            "404.tsx": "This code exports a Next.js page component called FourOhFour that renders a NotFound component when accessed.",
            "login.tsx": "This code is a login page component that allows users to sign in using different social media providers or email.",
            "_document.tsx": "This code imports functions from external libraries to handle initial props in Next.js and extends the Document component.",
            "feedback.tsx": "This code imports the environment variables, creates a feedback board using Canny, and displays it in a container.",
            "redirect.tsx": "This code is a server-side redirect that checks if a review ID exists in the database and redirects accordingly.",
            "_app.tsx": "This is the main app component that provides the layout and functionality for the Civitai web application. It includes components for color scheme, notifications, session management, cookies, feature flags, maintenance mode, and more.",
            "discord": {
                "link-role.tsx": "This code is a Next.js page component that allows users to link their Discord account to their Civitai account."
            },
            "posts": {
                "index.tsx": "This code is a React component that renders a page for displaying and filtering posts in a masonry layout.",
                "feed.tsx": "A post feed component with filters, announcements, toggle, sorting, and navigation buttons for posts.",
                "create.tsx": "A component for creating a post with the functionality to add images and write reviews for a resource.",
                "[postId]": {
                    "[[...postSlug]].tsx": "This is a Next.js page component that displays the details of a post using server-side rendering. It fetches data and prefetches images.",
                    "edit.tsx": "This code is a React component for editing a post, with functionality for saving, reviewing, and reordering images."
                }
            },
            "images": {
                "index.tsx": "This code is a React component that renders an image gallery with filters and infinite scrolling.",
                "[imageId].tsx": "This code imports various components and functions related to image handling and routing. It sets up a page to display image details based on the image ID provided in the URL. The page uses server-side rendering and prefetching for efficient loading."
            },
            "payment": {
                "success.tsx": "This code is a React component that displays a payment success message with icons, images, and buttons."
            },
            "moderator": {
                "reports.tsx": "This code is a React component that displays a table of reports and allows users to view and update individual reports. It uses various components and libraries for UI and data management.",
                "models.tsx": "This code implements a moderator interface for reviewing and declining model requests. It includes components for displaying models, handling pagination, and declining requests.",
                "tags.tsx": "This code is a React component that displays a table of tags with various functionalities like sorting, filtering, and selecting tags.",
                "image-tags.tsx": "This code is a React component that displays a grid of images with tags that need review. The component uses various components and hooks from the Mantine UI library, as well as custom components and utilities. Key functionality includes selecting and deselecting images, approving or declining tag removals, refreshing the data, and infinite scrolling.",
                "test.tsx": "The code imports components Container, AssociateModels, and Generate, and renders them inside a Container component.",
                "link-demo.tsx": "This code imports various components and functions from different modules and libraries and defines a Home component that uses these components and functions. The Home component displays a form and performs various actions based on user interactions.",
                "images.tsx": "This code is a React component that displays a grid of images that need review. It includes functionality to select and approve/delete images."
            },
            "articles": {
                "index.tsx": "This code is a Next.js page component that displays a list of articles with various filters and sorting options.",
                "create.tsx": "This code is a server-side rendered page that allows users to create articles if they have the necessary feature flag.",
                "[id]": {
                    "[[...slug]].tsx": "This code is a React component for an article details page with various components and functionality.",
                    "edit.tsx": "This code is a Next.js page component that renders an article edit page with a form for updating articles. The key components used are `Container`, `Loader`, `Center`, `ArticleUpsertForm`, and `trpc.article.getById.useQuery`."
                }
            },
            "content": {
                "[[...slug]].tsx": "This code imports necessary modules and components, sets up static paths, gets static props, and renders content."
            },
            "user": {
                "account.tsx": "This code is a React component that renders an account management page with various cards for managing user information and preferences. It also includes server-side logic for authentication and data fetching.",
                "downloads.tsx": "This code is a React component that displays a list of downloads, allows clearing the history, and hides individual downloads.",
                "notifications.tsx": "This code is a React component that renders a notifications page with a list of notifications for a user.",
                "[username]": {
                    "index.tsx": "This code imports various components and hooks from different libraries and modules and uses them to create a user profile page with images and reactions.",
                    "[list].tsx": "This code is a React component that displays user lists (following, followers, hidden) with various UI components.",
                    "models.tsx": "This code is a React component that renders a page for displaying user models with various filters and sorting options.",
                    "manage-categories.tsx": "This code is a React component that manages categories for models. It displays a table of models and allows the user to select models and assign them to a category.",
                    "articles.tsx": "This code is a Next.js page component that displays a user's published and draft articles with filtering options.",
                    "posts.tsx": "This code defines a UserPostsPage component that displays a list of posts with sorting and filtering options.",
                    "images.tsx": "This code exports the UserImagesPage component from the current directory."
                }
            },
            "leaderboard": {
                "[id].tsx": "This code is a leaderboard page that displays rankings and scores for different users in a game."
            },
            "models": {
                "create.tsx": "This code exports a component called ModelNew that renders a ModelWizard component and includes server-side props for authentication.",
                "[id]": {
                    "wizard.tsx": "This code imports various components and functions, defines a server-side prop function, and renders a ModelWizard component.",
                    "[[...slug]].tsx": "This code imports various components and hooks from different libraries and custom modules. It also defines several variables and functions for handling model details and versions.",
                    "edit.tsx": "This code is a Next.js page component for editing a model. It fetches the model data, displays a form, and allows saving changes.",
                    "reviews.tsx": "This code imports various components and hooks from different libraries and modules and uses them to create a model review page. The page displays information about a model, allows users to leave reviews, and shows existing reviews with ratings and comments.",
                    "model-versions": {
                        "create.tsx": "This code is a Next.js server-side function that checks if a user is authorized to create a new model version. If authorized, it renders a ModelVersionWizard component with the model data.",
                        "[versionId]": {
                            "wizard.tsx": "This code is a server-side function that handles the logic for displaying a wizard component for model versions."
                        }
                    }
                }
            },
            "subscribe": {
                "[plan].tsx": "This code is for a subscription page that allows users to select and purchase different subscription plans."
            },
            "api": {
                "restricted.ts": "This code defines a restricted endpoint that requires authentication using Next.js and NextAuth.js.",
                "health.ts": "This code is a Next.js API endpoint that checks the health status of a server's database and Redis client.",
                "image-upload.ts": "This code is an API endpoint for uploading images. It generates a unique image key and returns an upload URL.",
                "metrics.ts": "This code imports necessary dependencies, collects default metrics, and sets up a webhook endpoint that returns metrics.",
                "import.ts": "This code is an API endpoint for importing data from a specified source and processing it asynchronously.",
                "v1": {
                    "creators.ts": "This code is an API endpoint that retrieves data from a server and returns it as a JSON response. Key components include error handling and pagination.",
                    "tags.ts": "This code is an API endpoint that retrieves tag information with pagination support and error handling.",
                    "images": {
                        "index.ts": "This code is an API endpoint that retrieves a list of images based on various query parameters. It supports pagination and returns the images along with metadata."
                    },
                    "model-versions": {
                        "[id].ts": "This code defines an API endpoint that retrieves and returns details of a model version, including files and images.",
                        "by-hash": {
                            "ids.ts": "This code is a Next.js API route that handles a POST request and validates an array of SHA256 hashes.",
                            "[hash].ts": "This code is an API endpoint that takes a hash as a query parameter and returns the model version details.",
                            "index.ts": "This code is an API endpoint that receives a POST request with an array of SHA256 hashes and returns model versions related to those hashes."
                        }
                    },
                    "content": {
                        "[[...slug]].ts": "This code is a Next.js API route that handles a GET request to retrieve content based on a slug. It uses TRPC for error handling."
                    },
                    "models": {
                        "[id].ts": "This code defines an API endpoint that retrieves a model and its versions, files, and images.",
                        "index.ts": "This code is an API endpoint that fetches models with their versions, files, and images, and returns them as JSON."
                    },
                    "partners": {
                        "generate-token.ts": "This code is a Next.js API route that imports a source and updates a partner's token in the database.",
                        "supported-models.ts": "This code is an API endpoint that handles POST, PUT, and DELETE requests to update a partner's run strategy entries. It validates the request body, clears previous entries if necessary, and inserts new entries in batches. It also tracks the partner event and returns a success response with the number of entries processed."
                    },
                    "users": {
                        "index.ts": "This code is an API endpoint that handles a GET request, validates the query parameters, and returns a list of users. It uses the TRPC library for error handling."
                    }
                },
                "auth": {
                    "[...nextauth].ts": "This code sets up authentication and authorization using NextAuth with various providers like Discord, GitHub, Google, Reddit, and Email."
                },
                "trpc": {
                    "[trpc].ts": "This code exports an API handler for tRPC (a TypeScript RPC framework) using Next.js and Axiom."
                },
                "admin": {
                    "cache-check.ts": "This code is a Next.js API route that handles a webhook endpoint. It receives a request, parses the query parameters using a schema, performs certain actions based on the parsed parameters, and returns a JSON response. The key components used are NextApiRequest, NextApiResponse, zod for schema validation, redis for caching, and various helper functions.",
                    "refresh-sessions.ts": "This code is a webhook endpoint that receives a request, parses a query parameter using a schema, invalidates sessions, and responds with a success status and the parsed query parameter.",
                    "header-check.ts": "This code defines a Next.js API route that returns the request headers as a JSON response.",
                    "bootstrap.ts": "This code initializes Stripe products and prices, registers metadata on Discord, and returns a JSON response."
                },
                "internal": {
                    "essential-objects.ts": "This code is an API endpoint that retrieves a list of object keys from a database and returns them as a JSON response.",
                    "get-jobs.ts": "This code is an API endpoint that returns a JSON response containing an array of job data.",
                    "heap-dump.ts": "This code exports a Next.js API endpoint that generates and sends a heap dump file as a response."
                },
                "image": {
                    "ingestion-results.ts": "This code defines an AuthedEndpoint that handles a GET request, parses query parameters, and returns JSON data.",
                    "ingest.ts": "This code is an endpoint that handles a POST request to ingest an image, with authorization and error handling."
                },
                "download": {
                    "[...key].ts": "This code is an API endpoint that handles downloading training data. It checks for IP blacklisting, user authentication, and tracks user activity.",
                    "models": {
                        "[modelVersionId].ts": "This code is an API endpoint for downloading a model file. It handles authentication, rate limiting, and file retrieval."
                    },
                    "attachments": {
                        "[fileId].ts": "This code is an API endpoint for downloading attachments. It includes functionality for rate limiting and authentication."
                    }
                },
                "run": {
                    "[modelVersionId].ts": "This code is an API endpoint that runs a machine learning model and redirects the user to a specified URL."
                },
                "webhooks": {
                    "stripe.ts": "This code is a webhook handler for Stripe events, including managing payments, invoices, products, and subscriptions.",
                    "scan-result.ts": "This code is a webhook endpoint that handles POST requests and updates a database based on the request data. It performs tasks such as scanning files, updating scan results, importing/moving files, and updating file hashes.",
                    "run-jobs.ts": "This code defines a list of jobs with various functionalities and components, and provides an endpoint to run a specific job.",
                    "image-scan-result.ts": "This code is a webhook endpoint that handles image tag data. It receives a POST request with image tag information, validates the request body, and performs different actions based on the status of the image. It also handles the processing of incoming tags, adds computed tags, retrieves tag IDs from a cache or database, adds missing tags to the database, and updates the image's tags and metadata in the database."
                },
                "mod": {
                    "reprocess-scan.ts": "This code is an API endpoint that reprocesses hashes for model files based on provided model IDs, model version IDs, or model file IDs.",
                    "scan-images.ts": "This code is an API endpoint that scans images for a given image count or image IDs. It sends batches of images to an image scanning endpoint and updates the database with the scan request time.",
                    "clean-up.ts": "This code is an API endpoint that receives a request and response object and performs a cleanModel operation. It parses the query parameters, validates them using a schema, and then performs various operations based on the parsed parameters. It interacts with a database, uses an external S3 client, and performs asynchronous tasks."
                },
                "generation": {
                    "requests": {
                        "[requestId].ts": "This code exports an authenticated endpoint that handles a DELETE request to delete a generation request.",
                        "index.ts": "This code is an endpoint handler that handles GET and POST requests for generation requests, using authentication."
                    }
                },
                "upload": {
                    "complete.ts": "This code is an API endpoint for completing a multipart upload to an S3 bucket and logging the completion.",
                    "abort.ts": "This code is an API endpoint for aborting a multipart upload to an S3 bucket, with authentication and logging.",
                    "index.ts": "This code is an API endpoint for uploading files to an S3 bucket, with authentication and logging functionality."
                }
            },
            "tag": {
                "[tagname].tsx": "This is a Next.js page component that displays a tag page with models and filters."
            },
            "dmca": {
                "counter-notice.tsx": "This code renders a ClickUp form inside a Container component from the Mantine library.",
                "notice.tsx": "This code imports a Container component from '@mantine/core' and renders an iframe with a form embedded inside it."
            },
            "questions": {
                "index.tsx": "This code imports various components and functions from different libraries and modules, and renders a list of questions.",
                "create.tsx": "A page component for creating a question, with a server-side function to handle session and redirection.",
                "[questionId]": {
                    "[[...questionDetailSlug]].tsx": "This code is a Next.js page component that renders a question and its answers on a web page. It includes functionality for fetching data from a server, handling server-side rendering, and handling user authentication. The components used include Container, Stack, Title, Group, QuestionForm, AnswerDetail, AnswerForm, QuestionDetails, and NotFound."
                }
            },
            "reviews": {
                "[reviewId].tsx": "This code is a Next.js page component that renders a review detail page and prefetches review data on the server side."
            }
        },
        "store": {
            "catch-navigation.store.ts": "This code defines a custom hook and components for registering navigation event listeners to prevent users from navigating while changes are being saved. The key functionality includes registering and deregistering event handlers and handling the 'beforeunload' and 'routeChangeStart' events. The components include the `RegisterCatchNavigation` component for handling the event listeners and the `registerCatchNavigation` and `deregisterCatchNavigation` functions for adding and removing a specific event handler.",
            "s3-upload.store.ts": "This code defines a custom hook called `useS3UploadStore` that provides functionality for uploading files to an S3 bucket. The hook uses Zustand for state management and Lodash for utility functions. The key components of the hook include functions for uploading files, tracking upload progress, updating metadata, and aborting uploads.",
            "cf-upload.store.ts": "This code defines a custom hook `useCFUploadStore` that manages file uploads with tracking and concurrency.",
            "images.store.ts": "This code creates a Zustand store for managing image states, with the ability to set image properties.",
            "ClientHistoryStore.tsx": "This code creates a client-side navigation store using Zustand and provides functionality for managing navigation history."
        }
    }
}